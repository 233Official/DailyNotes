import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,d as s,b as t,e as p}from"./app-BT-bWAve.js";const u={},i=p('<h1 id="ch12-反射" tabindex="-1"><a class="header-anchor" href="#ch12-反射"><span>CH12.反射</span></a></h1><hr><ul><li><a href="#ch12%E5%8F%8D%E5%B0%84">CH12.反射</a><ul><li><a href="#ch121%E4%B8%BA%E4%BD%95%E9%9C%80%E8%A6%81%E5%8F%8D%E5%B0%84">CH12.1.为何需要反射</a></li><li><a href="#ch122reflecttype-%E5%92%8C-reflectvalue">CH12.2.reflect.Type 和 reflect.Value</a><ul><li><a href="#reflecttype">reflect.Type</a></li><li><a href="#reflectvalue">reflect.Value</a></li></ul></li><li><a href="#ch123-display%E4%B8%80%E4%B8%AA%E9%80%92%E5%BD%92%E7%9A%84%E5%80%BC%E6%89%93%E5%8D%B0%E5%99%A8">CH12.3. Display，一个递归的值打印器</a></li><li><a href="#ch124-%E7%A4%BA%E4%BE%8B-%E7%BC%96%E7%A0%81%E4%B8%BAs%E8%A1%A8%E8%BE%BE%E5%BC%8F">CH12.4. 示例: 编码为S表达式</a></li><li><a href="#ch125-%E9%80%9A%E8%BF%87reflectvalue%E4%BF%AE%E6%94%B9%E5%80%BC">CH12.5. 通过reflect.Value修改值</a></li><li><a href="#ch126-%E7%A4%BA%E4%BE%8B-%E8%A7%A3%E7%A0%81s%E8%A1%A8%E8%BE%BE%E5%BC%8F">CH12.6. 示例: 解码S表达式</a></li><li><a href="#ch127-%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E6%AE%B5%E6%A0%87%E7%AD%BE">CH12.7. 获取结构体字段标签</a></li><li><a href="#ch128-%E6%98%BE%E7%A4%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95%E9%9B%86">CH12.8. 显示一个类型的方法集</a></li><li><a href="#ch129-%E5%87%A0%E7%82%B9%E5%BF%A0%E5%91%8A">CH12.9. 几点忠告</a></li></ul></li></ul><hr>',4),k={href:"https://golang-china.github.io/gopl-zh/ch12/ch12.html",target:"_blank",rel:"noopener noreferrer"},r=p(`<p>在Go语言中，反射（Reflection）是一种强大的工具，它允许程序在运行时检查和操作变量的类型和值。反射使得代码能够在编译时未知的情况下操作不同类型的数据。Go语言中的反射主要通过标准库中的<code>reflect</code>包来实现。</p><p>在本章，我们将探讨Go语言的反射特性，看看它可以给语言增加哪些表达力，以及在两个至关重要的API是如何使用反射机制的：</p><ul><li>一个是fmt包提供的字符串格式化功能</li><li>另一个是类似 <code>encoding/json</code> 和 <code>encoding/xml</code> 提供的针对特定协议的编解码功能。</li></ul><p>对于我们在4.6节中看到过的 <code>text/template</code> 和 <code>html/template</code> 包，它们的实现也是依赖反射技术的。然后，反射是一个复杂的内省技术，不应该随意使用，因此，尽管上面这些包内部都是用反射技术实现的，但是它们自己的API都没有公开反射相关的接口。</p><hr><p>反射在Go语言中非常有用，尤其是在需要编写通用库、框架或需要处理未知类型的情况下。不过，反射也带来了性能开销和代码的复杂性，因此在使用时需要谨慎。</p><p>如下是一个示例, 展示了如何使用反射来获取类型和值、获取变量的基本类型、通过反射修改值，以及如何操作结构体的字段。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;reflect&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 示例1：获取类型和值</span>
	<span class="token keyword">var</span> x <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">3.4</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;type:&quot;</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// type: float64</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;value:&quot;</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// value: 3.4</span>

	<span class="token comment">// 示例2：获取Kind</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;kind:&quot;</span><span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// kind: float64</span>

	<span class="token comment">// 示例3：通过反射修改值</span>
	y <span class="token operator">:=</span> <span class="token number">7</span>
	v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span> <span class="token comment">// 传递指针</span>
	v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;new value:&quot;</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// new value: 42</span>

	<span class="token comment">// 示例4：操作结构体字段</span>
	<span class="token keyword">type</span> T <span class="token keyword">struct</span> <span class="token punctuation">{</span>
		A <span class="token builtin">int</span>
		B <span class="token builtin">string</span>
	<span class="token punctuation">}</span>
	t <span class="token operator">:=</span> T<span class="token punctuation">{</span><span class="token number">203</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">}</span>
	s <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	typeOfT <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 0: A int = 203</span>
	<span class="token comment">// 1: B string = hello</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		f <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d: %s %s = %v\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> typeOfT<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	s<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span>
	s<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;new struct:&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token comment">// new struct: {999 world}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407300209215.png" alt="image-20240730020939137"></p></blockquote><p>一些Go语言反射中的关键概念</p><p><strong>Type和Value</strong>：</p><ul><li><code>reflect.Type</code>：表示一个Go类型，可以使用<code>reflect.TypeOf</code>函数获取。</li><li><code>reflect.Value</code>：表示一个Go值，可以使用<code>reflect.ValueOf</code>函数获取。</li></ul><p><strong>Kind</strong>：</p><ul><li><code>reflect.Kind</code>表示Go语言的基本类型，比如<code>int</code>、<code>float64</code>、<code>slice</code>、<code>struct</code>等。<code>Kind</code>可以帮助我们知道某个值属于哪种基础类型，而不关注具体的类型细节。</li><li>可以通过<code>reflect.Type</code>的<code>Kind</code>方法来获取。</li></ul><p><strong>修改值</strong>：</p><ul><li>要使用反射修改变量的值，必须是可设置的（settable）。一般需要传递变量的指针。</li><li>使用<code>reflect.Value</code>的<code>Set</code>方法来修改值。</li></ul><p><strong>检查和操作结构体字段和方法</strong>：</p><ul><li>可以通过反射来检查结构体的字段和方法，并进行相应的操作。</li></ul><hr><h2 id="ch12-1-为何需要反射" tabindex="-1"><a class="header-anchor" href="#ch12-1-为何需要反射"><span>CH12.1.为何需要反射</span></a></h2>`,20),d={href:"https://golang-china.github.io/gopl-zh/ch12/ch12-01.html",target:"_blank",rel:"noopener noreferrer"},v=p(`<p>有时候我们需要编写一个函数能够处理一类并不满足普通公共接口的类型的值，也可能是因为它们并没有确定的表示方式，或者是在我们设计该函数的时候这些类型可能还不存在。</p><p>一个大家熟悉的例子是 <code>fmt.Fprintf</code> 函数提供的字符串格式化处理逻辑，它可以用来对任意类型的值格式化并打印，甚至支持用户自定义的类型。</p><p>让我们也来尝试实现一个类似功能的函数。为了简单起见，我们的函数只接收一个参数，然后返回和 <code>fmt.Sprint</code> 类似的格式化后的字符串。我们实现的函数名也叫 <code>Sprint</code>。</p><p>我们首先用 switch 类型分支来测试输入参数是否实现了 String 方法，如果是的话就调用该方法。然后继续增加类型测试分支，检查这个值的动态类型是否是 <code>string</code>、<code>int</code>、<code>bool</code> 等基础类型，并在每种情况下执行相应的格式化操作。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// 函数接收一个空接口类型 interface{} 的参数 x，这意味着它可以接受任何类型的值。</span>
<span class="token keyword">func</span> <span class="token function">Sprint</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">type</span> stringer <span class="token keyword">interface</span> <span class="token punctuation">{</span>
        <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">switch</span> x <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> stringer<span class="token punctuation">:</span>
        <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> x
    <span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token comment">// ...similar cases for int16, uint32, and so on...</span>
    <span class="token keyword">case</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> x <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;true&quot;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;false&quot;</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token comment">// array, chan, func, map, pointer, slice, struct</span>
        <span class="token keyword">return</span> <span class="token string">&quot;???&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是我们如何处理其它类似 <code>[]float64</code>、\`\`map[string][]string\`等类型呢？</p><p>我们当然可以添加更多的测试分支，但是这些组合类型的数目基本是无穷的。</p><p>还有如何处理类似 <code>url.Values</code> 这样的具名类型呢？即使类型分支可以识别出底层的基础类型是 <code>map[string][]string</code>，但是它并不匹配 <code>url.Values</code> 类型，因为它们是两种不同的类型，而 且switc h类型分支也不可能包含每个类似 <code>url.Values</code> 的类型，这会导致对这些库的依赖。</p><p>没有办法来检查未知类型的表示方式，我们被卡住了。这就是我们需要反射的原因。</p><hr><h2 id="ch12-2-reflect-type-和-reflect-value" tabindex="-1"><a class="header-anchor" href="#ch12-2-reflect-type-和-reflect-value"><span>CH12.2.reflect.Type 和 reflect.Value</span></a></h2>`,11),m={href:"https://golang-china.github.io/gopl-zh/ch12/ch12-02.html",target:"_blank",rel:"noopener noreferrer"},f=p(`<p>反射是由 reflect 包提供的。它定义了两个重要的类型，Type 和 Value。</p><hr><h3 id="reflect-type" tabindex="-1"><a class="header-anchor" href="#reflect-type"><span>reflect.Type</span></a></h3><p>一个 Type 表示一个Go类型。它是一个接口，有许多方法来区分类型以及检查它们的组成部分，例如一个结构体的成员或一个函数的参数等。唯一能反映 <code>reflect.Type</code> 实现的是接口的类型描述信息（§7.5），也正是这个实体标识了接口值的动态类型。</p><p>函数 <code>reflect.TypeOf</code> 接受任意的 <code>interface{}</code> 类型，并以 <code>reflect.Type</code> 形式返回其动态类型：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// a reflect.Type</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;int&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>          <span class="token comment">// &quot;int&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>TypeOf(3)</code> 调用将值 3 传给 <code>interface{}</code> 参数。</p><p>回到 7.5节 的将一个具体的值转为接口类型会有一个隐式的接口转换操作，它会创建一个包含两个信息的接口值：</p><ul><li>操作数的动态类型（这里是 int）</li><li>它的动态的值（这里是 3）</li></ul><p>因为 <code>reflect.TypeOf</code> 返回的是一个动态类型的接口值，它总是返回具体的类型。因此，下面的代码将打印 <code>*os.File</code> 而不是 <code>io.Writer</code>。稍后，我们将看到能够表达接口类型的 <code>reflect.Type</code>。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> w io<span class="token punctuation">.</span>Writer <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdout
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;*os.File&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407300232411.png" alt="image-20240730023221373"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407300232462.png" alt="image-20240730023232431"></p></blockquote><hr><p>要注意的是 <code>reflect.Type</code> 接口是满足 <code>fmt.Stringer</code> 接口的。因为打印一个接口的动态类型对于调试和日志是有帮助的， <code>fmt.Printf</code> 提供了一个缩写 <code>%T</code> 参数，内部使用 <code>reflect.TypeOf</code> 来输出：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// &quot;int&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="reflect-value" tabindex="-1"><a class="header-anchor" href="#reflect-value"><span>reflect.Value</span></a></h3><p><code>reflect</code> 包中另一个重要的类型是 Value。一个 <code>reflect.Value</code> 可以装载任意类型的值。</p><p>函数 <code>reflect.ValueOf</code> 接受任意的 <code>interface{}</code> 类型，并返回一个装载着其动态值的 <code>reflect.Value</code>。</p><p>和 <code>reflect.TypeOf</code> 类似，<code>reflect.ValueOf</code> 返回的结果也是具体的类型，但是 <code>reflect.Value</code> 也可以持有一个接口值。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> w io<span class="token punctuation">.</span>Writer <span class="token operator">=</span> os<span class="token punctuation">.</span>Stdout
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">TypeOf</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;*os.File&quot;</span>

fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%T\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// &quot;int&quot;</span>

v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// a reflect.Value</span>
<span class="token comment">//  fmt.Println 函数会自动调用 reflect.Value 的 String 方法，该方法对基本类型（如 int）进行特殊处理，返回其字符串表示形式。 &quot;3&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%v\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token comment">// %v 是 Go 语言中的通用占位符，它会调用 v 的 String 方法，输出结果同样为 &quot;3&quot;</span>
<span class="token comment">// v.String() 明确调用了 reflect.Value 类型的 String 方法。对于 reflect.Value 类型，这个方法返回的是值的描述信息，而不是被封装的值本身</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NOTE: &quot;&lt;int Value&gt;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 <code>reflect.Type</code> 类似，\`\`reflect.Value<code>也满足</code>fmt.Stringer<code>接口，但是除非 Value 持有的是字符串，否则 String 方法只返回其类型。而使用 fmt 包的 %v 标志参数会对</code>reflect.Values\` 特殊处理。</p><p>对 Value 调用 Type 方法将返回具体类型所对应的 <code>reflect.Type</code>：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>t <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment">// a reflect.Type</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;int&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>reflect.ValueOf</code> 的逆操作是 <code>reflect.Value.Interface</code> 方法。它返回一个 <code>interface{}</code> 类型，装载着与 <code>reflect.Value</code> 相同的具体值：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// a reflect.Value</span>
x <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// an interface{}</span>
i <span class="token operator">:=</span> x<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>            <span class="token comment">// an int</span>
fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>   <span class="token comment">// &quot;3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>reflect.Value</code> 和 <code>interface{}</code> 都能装载任意的值。所不同的是:</p><ul><li>一个空的接口隐藏了值内部的表示方式和所有方法，因此只有我们知道具体的动态类型才能使用类型断言来访问内部的值（就像上面那样），内部值我们没法访问。</li><li>相比之下，一个 Value 则有很多方法来检查其内容，无论它的具体类型是什么。</li></ul><p>让我们再次尝试实现我们的格式化函数 format.Any。</p><p>我们使用 <code>reflect.Value</code> 的 Kind 方法来替代之前的类型 switch。虽然还是有无穷多的类型，但是它们的 kinds 类型却是有限的：Bool、String 和 所有数字类型的基础类型；Array 和 Struct 对应的聚合类型；Chan、Func、Ptr、Slice 和 Map 对应的引用类型；interface 类型；还有表示空值的 Invalid 类型。（空的 reflect.Value 的 kind 即为 Invalid。）</p><p><code>ch12/format</code></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> format

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;reflect&quot;</span>
    <span class="token string">&quot;strconv&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// Any formats any value as a string.</span>
<span class="token keyword">func</span> <span class="token function">Any</span><span class="token punctuation">(</span>value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">formatAtom</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// formatAtom formats a value without inspecting its internal structure.</span>
<span class="token keyword">func</span> <span class="token function">formatAtom</span><span class="token punctuation">(</span>v reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> v<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Invalid<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;invalid&quot;</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int8<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int16<span class="token punctuation">,</span>
        reflect<span class="token punctuation">.</span>Int32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int64<span class="token punctuation">:</span>
        <span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Uint<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint8<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint16<span class="token punctuation">,</span>
        reflect<span class="token punctuation">.</span>Uint32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint64<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uintptr<span class="token punctuation">:</span>
        <span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">FormatUint</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Uint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token comment">// ...floating-point and complex cases omitted for brevity...</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Bool<span class="token punctuation">:</span>
        <span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">FormatBool</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>String<span class="token punctuation">:</span>
        <span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">Quote</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Chan<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Func<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Ptr<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Slice<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Map<span class="token punctuation">:</span>
        <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 0x&quot;</span> <span class="token operator">+</span>
            strconv<span class="token punctuation">.</span><span class="token function">FormatUint</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment">// reflect.Array, reflect.Struct, reflect.Interface</span>
        <span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; value&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到目前为止，我们的函数将每个值视作一个不可分割没有内部结构的物品，因此它叫 <code>formatAtom</code>。</p><p>对于聚合类型（结构体和数组）和接口，只是打印值的类型，对于引用类型（channels、functions、pointers、slices 和 maps），打印类型和十六进制的引用地址。虽然还不够理想，但是依然是一个重大的进步，并且 Kind 只关心底层表示，\`\`format.Any\` 也支持具名类型。例如：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">var</span> x <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">var</span> d time<span class="token punctuation">.</span>Duration <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Nanosecond
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment">// &quot;1&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment">// &quot;1&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment">// &quot;[]int64 0x8202b87b0&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>format<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>time<span class="token punctuation">.</span>Duration<span class="token punctuation">{</span>d<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[]time.Duration 0x8202b87e0&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407300257898.png" alt="image-20240730025752847"></p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407300257791.png" alt="image-20240730025757744"></p><hr><h2 id="ch12-3-display-一个递归的值打印器" tabindex="-1"><a class="header-anchor" href="#ch12-3-display-一个递归的值打印器"><span>CH12.3. Display，一个递归的值打印器</span></a></h2>`,39),b={href:"https://golang-china.github.io/gopl-zh/ch12/ch12-03.html",target:"_blank",rel:"noopener noreferrer"},g=p(`<blockquote><p>这一节的内容是对上一节的扩充, 通过相对有限的 kind 来分别做处理</p></blockquote><hr><p>接下来，让我们看看如何改善聚合数据类型的显示。我们并不想完全克隆一个fmt.Sprint函数，我们只是构建一个用于调试用的Display函数：给定任意一个复杂类型 x，打印这个值对应的完整结构，同时标记每个元素的发现路径。让我们从一个例子开始。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>e<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> eval<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">&quot;sqrt(A / pi)&quot;</span><span class="token punctuation">)</span>
<span class="token function">Display</span><span class="token punctuation">(</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的调用中，传入Display函数的参数是在7.9节一个表达式求值函数返回的语法树。Display函数的输出如下：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>Display e <span class="token punctuation">(</span>eval<span class="token punctuation">.</span>call<span class="token punctuation">)</span><span class="token punctuation">:</span>
e<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token string">&quot;sqrt&quot;</span>
e<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">=</span> eval<span class="token punctuation">.</span>binary
e<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>op <span class="token operator">=</span> <span class="token number">47</span>
e<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">=</span> eval<span class="token punctuation">.</span>Var
e<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>x<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;A&quot;</span>
e<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">=</span> eval<span class="token punctuation">.</span>Var
e<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>y<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;pi&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你应该尽量避免在一个包的API中暴露涉及反射的接口。我们将定义一个未导出的display函数用于递归处理工作，导出的是Display函数，它只是display函数简单的包装以接受interface{}类型的参数：</p><p><code>ch12/display</code>:</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">Display</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Display %s (%T):\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
    <span class="token function">display</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在display函数中，我们使用了前面定义的打印基础类型——基本类型、函数和chan等——元素值的formatAtom函数，但是我们会使用<code>reflect.Value</code> 的方法来递归显示复杂类型的每一个成员。在递归下降过程中，path字符串，从最开始传入的起始值（这里是“e”），将逐步增长来表示是如何达到当前值（例如 <code>e.args[0].value</code>）的。</p><p>因为我们不再模拟 <code>fmt.Sprint</code> 函数，我们将直接使用fmt包来简化我们的例子实现。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">display</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> v reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> v<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Invalid<span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s = invalid\\n&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Slice<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Array<span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
            <span class="token function">display</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s[%d]&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Struct<span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
            fieldPath <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s.%s&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
            <span class="token function">display</span><span class="token punctuation">(</span>fieldPath<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Map<span class="token punctuation">:</span>
        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> v<span class="token punctuation">.</span><span class="token function">MapKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">display</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s[%s]&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span>
                <span class="token function">formatAtom</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">MapIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Ptr<span class="token punctuation">:</span>
        <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">IsNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s = nil\\n&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">display</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;(*%s)&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Interface<span class="token punctuation">:</span>
        <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">IsNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s = nil\\n&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s.type = %s\\n&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">display</span><span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">&quot;.value&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment">// basic types, channels, funcs</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s = %s\\n&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token function">formatAtom</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们针对不同类型分别讨论。</p><ul><li><p><strong>Slice和数组</strong></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
    <span class="token function">display</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s[%d]&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种的处理逻辑是一样的。Len方法返回slice或数组值中的元素个数，\`\`Index(i)<code> 获得索引i对应的元素，返回的也是一个</code>reflect.Value\`；</p><p>如果索引i超出范围的话将导致panic异常，这与数组或 slice 类型内建的 <code>len(a)</code>和 <code>a[i]</code> 操作类似。</p><p>display针对序列中的每个元素递归调用自身处理，我们通过在递归处理时向path附加“[i]”来表示访问路径。</p><hr><p>虽然reflect.Value类型带有很多方法，但是只有少数的方法能对任意值都安全调用。例如，Index方法只能对Slice、数组或字符串类型的值调用，如果对其它类型调用则会导致panic异常。</p></li><li><p><strong>结构体</strong></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Struct<span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        fieldPath <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s.%s&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
        <span class="token function">display</span><span class="token punctuation">(</span>fieldPath<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>NumField</code> 方法报告结构体中成员(字段)的数量</li><li><code>Field(i)</code> 以 <code>reflect.Value</code>类型返回第i个成员的值。成员列表也包括通过匿名字段提升上来的成员。</li><li><code>v.Type().Field(i).Name</code><ul><li><code>v.Type()</code>：返回结构体的类型（<code>reflect.Type</code>）。</li><li><code>v.Type().Field(i)</code>：返回第 <code>i</code> 个字段的反射结构体 <code>reflect.StructField</code>。</li><li><code>v.Type().Field(i).Name</code>：返回第 <code>i</code> 个字段的名称。</li></ul></li></ul></li><li><p><strong>Maps</strong></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Map<span class="token punctuation">:</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> v<span class="token punctuation">.</span><span class="token function">MapKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">display</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s[%s]&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span>
            <span class="token function">formatAtom</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">MapIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MapKeys 方法返回一个 <code>reflect.Value</code> 类型的slice，每一个元素对应map的一个key。</p><p>和往常一样，遍历map时顺序是随机的。<code>MapIndex(key)</code> 返回map中key对应的value。</p><p>我们向 path 添加 <code>[key]</code> 来表示访问路径。（我们这里有一个未完成的工作。其实map的key的类型并不局限于formatAtom能完美处理的类型；数组、结构体和接口都可以作为map的key。针对这种类型，完善key的显示信息是练习12.1的任务。）</p></li><li><p><strong>指针</strong></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Ptr<span class="token punctuation">:</span>
    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">IsNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s = nil\\n&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">display</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;(*%s)&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Elem方法返回指针指向的变量，依然是reflect.Value类型。</p><p>即使指针是nil，这个操作也是安全的，在这种情况下指针是Invalid类型，但是我们可以用IsNil方法来显式地测试一个空指针，这样我们可以打印更合适的信息。我们在path前面添加“*”，并用括弧包含以避免歧义。</p></li><li><p><strong>接口</strong></p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Interface<span class="token punctuation">:</span>
    <span class="token keyword">if</span> v<span class="token punctuation">.</span><span class="token function">IsNil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s = nil\\n&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s.type = %s\\n&quot;</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">display</span><span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">&quot;.value&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再一次，我们使用IsNil方法来测试接口是否是nil，如果不是，我们可以调用v.Elem()来获取接口对应的动态值，并且打印对应的类型和值。</p></li></ul><p>后续便是一些实际的测试用例, 以及引出了关于循环的处理, 需要在 13.3 讲解具体方案</p><hr><h2 id="ch12-4-示例-编码为s表达式" tabindex="-1"><a class="header-anchor" href="#ch12-4-示例-编码为s表达式"><span>CH12.4. 示例: 编码为S表达式</span></a></h2>`,17),h={href:"https://golang-china.github.io/gopl-zh/ch12/ch12-04.html",target:"_blank",rel:"noopener noreferrer"},y=p(`<blockquote><p>这一节主要是举了个反射应用的例子, 本质上和前一节没多大区别, 课后的练习也是补充示例中的缺陷</p></blockquote><hr><p>Display是一个用于显示结构化数据的调试工具，但是它并不能将任意的Go语言对象编码为通用消息然后用于进程间通信。</p><p>正如我们在4.5节中中看到的，Go语言的标准库支持了包括JSON、XML和ASN.1等多种编码格式。</p><p>还有另一种依然被广泛使用的格式是S表达式格式，采用Lisp语言的语法。但是和其他编码格式不同的是，Go语言自带的标准库并不支持S表达式，主要是因为它没有一个公认的标准规范。</p><p>在本节中，我们将定义一个包用于将任意的Go语言对象编码为S表达式格式，它支持以下结构：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token number">42</span>          integer
<span class="token string">&quot;hello&quot;</span>     <span class="token builtin">string</span>（带有Go风格的引号）
foo         symbol（未用引号括起来的名字）
<span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span>     list  （括号包起来的<span class="token number">0</span>个或多个元素）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>布尔型习惯上使用t符号表示true，空列表或nil符号表示false，但是为了简单起见，我们暂时忽略布尔类型。</p><p>同时忽略的还有chan管道和函数，因为通过反射并无法知道它们的确切状态。</p><p>我们忽略的还有浮点数、复数和interface。支持它们是练习12.3的任务。</p><hr><p>我们将Go语言的类型编码为S表达式的方法如下。</p><ul><li>整数和字符串以显而易见的方式编码。</li><li>空值编码为nil符号。</li><li>数组和slice被编码为列表。</li><li>结构体被编码为成员对象的列表，每个成员对象对应一个有两个元素的子列表，子列表的第一个元素是成员的名字，第二个元素是成员的值。</li><li>Map被编码为键值对的列表。</li></ul><p>传统上，S表达式使用点状符号列表(key . value)结构来表示key/value对，而不是用一个含双元素的列表，不过为了简单我们忽略了点状符号列表。</p><p>编码是由一个encode递归函数完成，如下所示。它的结构本质上和前面的Display函数类似：</p>`,15),q={href:"https://github.com/adonovan/gopl.io/tree/master/ch12/sexpr",target:"_blank",rel:"noopener noreferrer"},x=p(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">encode</span><span class="token punctuation">(</span>buf <span class="token operator">*</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">,</span> v reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> v<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Invalid<span class="token punctuation">:</span>
        buf<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">&quot;nil&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int8<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int16<span class="token punctuation">,</span>
        reflect<span class="token punctuation">.</span>Int32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Int64<span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Uint<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint8<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint16<span class="token punctuation">,</span>
        reflect<span class="token punctuation">.</span>Uint32<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uint64<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Uintptr<span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Uint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>String<span class="token punctuation">:</span>
        fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;%q&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Ptr<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token function">encode</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Array<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span>Slice<span class="token punctuation">:</span> <span class="token comment">// (value ...)</span>
        buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">encode</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> err
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Struct<span class="token punctuation">:</span> <span class="token comment">// ((name value) ...)</span>
        buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">&quot;(%s &quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">encode</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> err
            <span class="token punctuation">}</span>
            buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Map<span class="token punctuation">:</span> <span class="token comment">// ((key value) ...)</span>
        buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i<span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> v<span class="token punctuation">.</span><span class="token function">MapKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
                buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">encode</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> err
            <span class="token punctuation">}</span>
            buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">&#39; &#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">encode</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">MapIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> err
            <span class="token punctuation">}</span>
            buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        buf<span class="token punctuation">.</span><span class="token function">WriteByte</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token comment">// float, complex, bool, chan, func, interface</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unsupported type: %s&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Marshal 函数是对 encode 的包装，以保持和 <code>encoding/...</code> 下其它包有着相似的API：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Marshal encodes a Go value in S-expression form.</span>
<span class="token keyword">func</span> <span class="token function">Marshal</span><span class="token punctuation">(</span>v <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Buffer
    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是Marshal对12.3节的strangelove变量编码后的结果：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token punctuation">(</span><span class="token punctuation">(</span>Title <span class="token string">&quot;Dr. Strangelove&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Subtitle &quot;How I Learned to Stop Worrying and Lo
ve the Bomb<span class="token string">&quot;) (Year 1964) (Actor ((&quot;</span>Grp<span class="token punctuation">.</span> Capt<span class="token punctuation">.</span> Lionel Mandrake<span class="token string">&quot; &quot;</span>Peter Sell
ers<span class="token string">&quot;) (&quot;</span>Pres<span class="token punctuation">.</span> Merkin Muffley<span class="token string">&quot; &quot;</span>Peter Sellers<span class="token string">&quot;) (&quot;</span>Gen<span class="token punctuation">.</span> Buck Turgidson<span class="token string">&quot; &quot;</span>Geor
ge C<span class="token punctuation">.</span> Scott<span class="token string">&quot;) (&quot;</span>Brig<span class="token punctuation">.</span> Gen<span class="token punctuation">.</span> Jack D<span class="token punctuation">.</span> Ripper<span class="token string">&quot; &quot;</span>Sterling Hayden<span class="token string">&quot;) (&quot;</span>Maj<span class="token punctuation">.</span> T<span class="token punctuation">.</span>J<span class="token punctuation">.</span> \\
<span class="token string">&quot;King\\&quot; Kong&quot;</span> <span class="token string">&quot;Slim Pickens&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">&quot;Dr. Strangelove&quot;</span> <span class="token string">&quot;Peter Sellers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Oscars
<span class="token punctuation">(</span><span class="token string">&quot;Best Actor (Nomin.)&quot;</span> <span class="token string">&quot;Best Adapted Screenplay (Nomin.)&quot;</span> &quot;Best Director <span class="token punctuation">(</span>N
omin<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token string">&quot; &quot;</span>Best Picture <span class="token punctuation">(</span>Nomin<span class="token punctuation">.</span><span class="token punctuation">)</span>&quot;<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Sequel <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个输出编码为一行中以减少输出的大小，但是也很难阅读。下面是对S表达式手动格式化的结果。编写一个S表达式的美化格式化函数将作为一个具有挑战性的练习任务；不过 http://gopl.io 也提供了一个简单的版本。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token punctuation">(</span><span class="token punctuation">(</span>Title <span class="token string">&quot;Dr. Strangelove&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">(</span>Subtitle <span class="token string">&quot;How I Learned to Stop Worrying and Love the Bomb&quot;</span><span class="token punctuation">)</span>
 <span class="token punctuation">(</span>Year <span class="token number">1964</span><span class="token punctuation">)</span>
 <span class="token punctuation">(</span>Actor <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;Grp. Capt. Lionel Mandrake&quot;</span> <span class="token string">&quot;Peter Sellers&quot;</span><span class="token punctuation">)</span>
         <span class="token punctuation">(</span><span class="token string">&quot;Pres. Merkin Muffley&quot;</span> <span class="token string">&quot;Peter Sellers&quot;</span><span class="token punctuation">)</span>
         <span class="token punctuation">(</span><span class="token string">&quot;Gen. Buck Turgidson&quot;</span> <span class="token string">&quot;George C. Scott&quot;</span><span class="token punctuation">)</span>
         <span class="token punctuation">(</span><span class="token string">&quot;Brig. Gen. Jack D. Ripper&quot;</span> <span class="token string">&quot;Sterling Hayden&quot;</span><span class="token punctuation">)</span>
         <span class="token punctuation">(</span><span class="token string">&quot;Maj. T.J. \\&quot;King\\&quot; Kong&quot;</span> <span class="token string">&quot;Slim Pickens&quot;</span><span class="token punctuation">)</span>
         <span class="token punctuation">(</span><span class="token string">&quot;Dr. Strangelove&quot;</span> <span class="token string">&quot;Peter Sellers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">(</span>Oscars <span class="token punctuation">(</span><span class="token string">&quot;Best Actor (Nomin.)&quot;</span>
          <span class="token string">&quot;Best Adapted Screenplay (Nomin.)&quot;</span>
          <span class="token string">&quot;Best Director (Nomin.)&quot;</span>
          <span class="token string">&quot;Best Picture (Nomin.)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
 <span class="token punctuation">(</span>Sequel <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 <code>fmt.Print</code>、<code>json.Marshal</code>、<code>Display</code> 函数类似，<code>sexpr.Marshal</code> 函数处理带环的数据结构也会陷入死循环。</p><hr><h2 id="ch12-5-通过reflect-value修改值" tabindex="-1"><a class="header-anchor" href="#ch12-5-通过reflect-value修改值"><span>CH12.5. 通过reflect.Value修改值</span></a></h2>`,10),w={href:"https://golang-china.github.io/gopl-zh/ch12/ch12-05.html",target:"_blank",rel:"noopener noreferrer"},E=p(`<p>本节主要讲了如何通过反射修改变量的值</p><p>首先通过 <code>refelct.Valueof(&amp;x).Elem()</code> 获取指针 <code>&amp;x</code> 指向的变量 <code>x</code> 的值, 然后可以</p><ul><li><p>通过指针地址和类型断言修改指向的数据, 例如</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>x <span class="token operator">:=</span> <span class="token number">2</span>
d <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// d refers to the variable x</span>
px <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// px := &amp;x</span>
<span class="token operator">*</span>px <span class="token operator">=</span> <span class="token number">3</span>                           <span class="token comment">// x = 3</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                    <span class="token comment">// &quot;3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过 Set 方法修改值</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>d<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// &quot;4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到通过 Set 方法修改值时需要传入一个 <code>reflect.ValueOf</code>, 其中传入的 <code>(4)</code> 也是有讲究的, 必须是 d 底层类型相同的类型的数据, 否则会 panic</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>d<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// panic: int64 is not assignable to int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>除了 Set 外, 对于基础数据类型还有更具体的SetInt、SetUint、SetString和SetFloat等方法, 例如</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>d <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
d<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// &quot;3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>讲完了修改值的方法后还提到了, 通过反射可以获取到未导出成员(私有成员)但是 <strong>无法修改他们</strong></p><hr><p>到目前为止，反射还只是程序中变量的另一种读取方式。然而，在本\`\`节中我们将重点讨论如何通过反射机制来修改变量。</p><p>回想一下，Go语言中类似x、x.f[1]和*p形式的表达式都可以表示变量，但是其它如x + 1和f(2)则不是变量。一个变量就是一个可寻址的内存空间，里面存储了一个值，并且存储的值可以通过内存地址来更新。</p><p>对于reflect.Values也有类似的区别。有一些reflect.Values是可取地址的；其它一些则不可以。考虑以下的声明语句：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>x <span class="token operator">:=</span> <span class="token number">2</span>                   <span class="token comment">// value   type    variable?</span>
a <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 2       int     no</span>
b <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">// 2       int     no</span>
c <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span> <span class="token comment">// &amp;x      *int    no</span>
d <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment">// 2       int     yes (x)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Elem</code> 方法用于获取指针指向的值。也就是说，<code>Elem</code> 方法返回一个 <code>reflect.Value</code>，这个值表示指针 <code>&amp;x</code> 指向的变量 <code>x</code> 的值。</p><hr><p>其中</p><ul><li>a对应的变量不可取地址。因为a中的值仅仅是整数2的拷贝副本。</li><li>b中的值也同样不可取地址。</li><li>c中的值还是不可取地址，它只是一个指针<code>&amp;x</code>的拷贝。</li></ul><p>实际上，所有通过reflect.ValueOf(x)返回的reflect.Value都是不可取地址的。</p><p>但是对于d，它是c的解引用方式生成的，指向另一个变量，因此是可取地址的。我们可以通过调用 <code>reflect.ValueOf(&amp;x).Elem()</code>，来获取任意变量x对应的可取地址的Value。</p><hr><p>我们可以通过调用reflect.Value的CanAddr方法来判断其是否可以被取地址：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;false&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;false&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;false&quot;</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;true&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>每当我们通过指针间接地获取的 <code>reflect.Value</code> 都是可取地址的，即使开始的是一个不可取地址的Value。在反射机制中，所有关于是否支持取地址的规则都是类似的。</p><p>例如，slice的索引表达式e[i]将隐式地包含一个指针，它就是可取地址的，即使开始的e表达式不支持也没有关系。</p><p>以此类推，<code>reflect.ValueOf(e).Index(i)</code> 对应的值也是可取地址的，即使原始的reflect.ValueOf(e)不支持也没有关系。</p><blockquote><p><code>Index</code> 方法用于获取集合（如数组、切片、字符串）中指定索引 <code>i</code> 处的元素的 <code>reflect.Value</code>。也就是说，<code>Index(i)</code> 方法返回一个 <code>reflect.Value</code>，这个值表示集合中第 <code>i</code> 个元素。</p></blockquote><hr><p>要从变量对应的可取地址的 <code>reflect.Value</code> 来访问变量需要三个步骤。</p><ol><li>第一步是调用 <code>Addr()方</code>法，它返回一个Value，里面保存了指向变量的指针。</li><li>然后是在Value上调用Interface()方法，也就是返回一个interface{}，里面包含指向变量的指针。</li><li>最后，如果我们知道变量的类型，我们可以使用类型的断言机制将得到的interface{}类型的接口强制转为普通的类型指针。</li></ol><p>这样我们就可以通过这个普通指针来更新变量了：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>x <span class="token operator">:=</span> <span class="token number">2</span>
d <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// d refers to the variable x</span>
px <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">Addr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token comment">// px := &amp;x</span>
<span class="token operator">*</span>px <span class="token operator">=</span> <span class="token number">3</span>                           <span class="token comment">// x = 3</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                    <span class="token comment">// &quot;3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，不使用指针，而是通过调用可取地址的 <code>reflect.Value</code> 的 <code>reflect.Value.Set</code> 方法来更新对应的值：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>d<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// &quot;4&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>Set 方法将在运行时执行和编译时进行类似的可赋值性约束的检查。</p><p>以上代码，变量和值都是int类型，但是如果变量是int64类型，那么程序将抛出一个panic异常，所以关键问题是要确保改类型的变量可以接受对应的值：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>d<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// panic: int64 is not assignable to int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Go 是一种强类型语言，不同类型之间不能自动转换，但可以显式转换。</p><p><code>int64</code>：明确指定为 64 位整数，这意味着它占用 8 个字节的存储空间，数值范围是从 <code>-2^63</code> 到 <code>2^63 - 1</code>。</p><p><code>int</code>：位宽依赖于具体的平台。在 32 位平台上，<code>int</code> 是 32 位整数；在 64 位平台上，<code>int</code> 是 64 位整数。具体取决于编译器和操作系统。</p></blockquote><p>同样，对一个不可取地址的reflect.Value调用Set方法也会导致panic异常：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>x <span class="token operator">:=</span> <span class="token number">2</span>
b <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
b<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// panic: Set using unaddressable value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有很多用于基本数据类型的Set方法：SetInt、SetUint、SetString和SetFloat等。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>d <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
d<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// &quot;3&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>从某种程度上说，这些Set方法总是尽可能地完成任务。</p><p>以SetInt为例，只要变量是某种类型的有符号整数就可以工作，即使是一些命名的类型、甚至只要底层数据类型是有符号整数就可以，而且如果对于变量类型值太大的话会被自动截断。</p><p>但需要谨慎的是：对于一个引用 <code>interface{}</code> 类型的 <code>reflect.Value</code> 调用SetInt会导致panic异常，即使那个interface{}变量对于整数类型也不行。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>x <span class="token operator">:=</span> <span class="token number">1</span>
rx <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
rx<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                     <span class="token comment">// OK, x = 2</span>
rx<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// OK, x = 3</span>
rx<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>            <span class="token comment">// panic: string is not assignable to int</span>
rx<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// panic: string is not assignable to int</span>

<span class="token keyword">var</span> y <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
ry <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
ry<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                     <span class="token comment">// panic: SetInt called on interface Value</span>
ry<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// OK, y = int(3)</span>
ry<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>            <span class="token comment">// panic: SetString called on interface Value</span>
ry<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// OK, y = &quot;hello&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们用Display显示 <code>os.Stdout</code> 结构时，我们发现反射可以越过Go语言的导出规则的限制读取结构体中未导出的成员，比如在类Unix系统上os.File结构体中的fd int成员。然而，利用反射机制并不能修改这些未导出的成员：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>stdout <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// *os.Stdout, an os.File var</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>stdout<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment">// &quot;os.File&quot;</span>
fd <span class="token operator">:=</span> stdout<span class="token punctuation">.</span><span class="token function">FieldByName</span><span class="token punctuation">(</span><span class="token string">&quot;fd&quot;</span><span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;1&quot;</span>
fd<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>          <span class="token comment">// panic: unexported field</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个可取地址的reflect.Value会记录一个结构体成员是否是未导出成员，如果是的话则拒绝修改操作。因此，CanAddr方法并不能正确反映一个变量是否是可以被修改的。另一个相关的方法CanSet是用于检查对应的reflect.Value是否是可取地址并可被修改的：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fd<span class="token punctuation">.</span><span class="token function">CanAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fd<span class="token punctuation">.</span><span class="token function">CanSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;true false&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="ch12-6-示例-解码s表达式" tabindex="-1"><a class="header-anchor" href="#ch12-6-示例-解码s表达式"><span>CH12.6. 示例: 解码S表达式</span></a></h2>`,50),S={href:"https://golang-china.github.io/gopl-zh/ch12/ch12-06.html",target:"_blank",rel:"noopener noreferrer"},B=p(`<p>本质上和前几章的内容也没啥区别, 而且我们写的时候大概率也用不上, 这一整章都是围绕同一个 S 表达式展开的, 而且最后也没写全, 大概率后续也用不上这个</p><hr><p>标准库中 <code>encoding/...</code> 下每个包中提供的Marshal编码函数都有一个对应的Unmarshal函数用于解码。例如，我们在4.5节中看到的，要将包含JSON编码格式的字节slice数据解码为我们自己的Movie类型（§12.3），我们可以这样做：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token comment">/* ... */</span><span class="token punctuation">}</span>
<span class="token keyword">var</span> movie Movie
err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>movie<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Unmarshal函数使用了反射机制类修改movie变量的每个成员，根据输入的内容为Movie成员创建对应的map、结构体和slice。</p><hr><p>现在让我们为S表达式编码实现一个简易的Unmarshal，类似于前面的json.Unmarshal标准库函数，对应我们之前实现的sexpr.Marshal函数的逆操作。</p><p>我们必须提醒一下，一个健壮的和通用的实现通常需要比例子更多的代码，为了便于演示我们采用了精简的实现。我们只支持S表达式有限的子集，同时处理错误的方式也比较粗暴，代码的目的是为了演示反射的用法，而不是构造一个实用的S表达式的解码器。</p><p>词法分析器lexer使用了标准库中的 <code>text/scanner</code> 包将输入流的字节数据解析为一个个类似注释、标识符、字符串面值和数字面值之类的标记。</p><p>输入扫描器scanner的Scan方法将提前扫描和返回下一个记号，对于rune类型。大多数记号，比如“(”，对应一个单一rune可表示的Unicode字符，但是text/scanner也可以用小的负数表示记号标识符、字符串等由多个字符组成的记号。调用Scan方法将返回这些记号的类型，接着调用TokenText方法将返回记号对应的文本内容。</p><p>因为每个解析器可能需要多次使用当前的记号，但是Scan会一直向前扫描，所以我们包装了一个lexer扫描器辅助类型，用于跟踪最近由Scan方法返回的记号。</p>`,11),V={href:"https://github.com/adonovan/gopl.io/tree/master/ch12/sexpr",target:"_blank",rel:"noopener noreferrer"},A=p(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">type</span> lexer <span class="token keyword">struct</span> <span class="token punctuation">{</span>
    scan  scanner<span class="token punctuation">.</span>Scanner
    token <span class="token builtin">rune</span> <span class="token comment">// the current token</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>lex <span class="token operator">*</span>lexer<span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> lex<span class="token punctuation">.</span>token <span class="token operator">=</span> lex<span class="token punctuation">.</span>scan<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>lex <span class="token operator">*</span>lexer<span class="token punctuation">)</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> lex<span class="token punctuation">.</span>scan<span class="token punctuation">.</span><span class="token function">TokenText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>lex <span class="token operator">*</span>lexer<span class="token punctuation">)</span> <span class="token function">consume</span><span class="token punctuation">(</span>want <span class="token builtin">rune</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> lex<span class="token punctuation">.</span>token <span class="token operator">!=</span> want <span class="token punctuation">{</span> <span class="token comment">// NOTE: Not an example of good error handling.</span>
        <span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;got %q, want %q&quot;</span><span class="token punctuation">,</span> lex<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> want<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    lex<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在让我们转到语法解析器。它主要包含两个功能。第一个是read函数，用于读取S表达式的当前标记，然后根据S表达式的当前标记更新可取地址的reflect.Value对应的变量v。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">read</span><span class="token punctuation">(</span>lex <span class="token operator">*</span>lexer<span class="token punctuation">,</span> v reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> lex<span class="token punctuation">.</span>token <span class="token punctuation">{</span>
    <span class="token keyword">case</span> scanner<span class="token punctuation">.</span>Ident<span class="token punctuation">:</span>
        <span class="token comment">// The only valid identifiers are</span>
        <span class="token comment">// &quot;nil&quot; and struct field names.</span>
        <span class="token keyword">if</span> lex<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;nil&quot;</span> <span class="token punctuation">{</span>
            v<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">Zero</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            lex<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
    <span class="token keyword">case</span> scanner<span class="token punctuation">.</span>String<span class="token punctuation">:</span>
        s<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Unquote</span><span class="token punctuation">(</span>lex<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NOTE: ignoring errors</span>
        v<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        lex<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token keyword">case</span> scanner<span class="token punctuation">.</span>Int<span class="token punctuation">:</span>
        i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>lex<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// NOTE: ignoring errors</span>
        v<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        lex<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token keyword">case</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">:</span>
        lex<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">readList</span><span class="token punctuation">(</span>lex<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
        lex<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// consume &#39;)&#39;</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    <span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;unexpected token %q&quot;</span><span class="token punctuation">,</span> lex<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="ch12-7-获取结构体字段标签" tabindex="-1"><a class="header-anchor" href="#ch12-7-获取结构体字段标签"><span>CH12.7. 获取结构体字段标签</span></a></h2>`,5),T={href:"https://golang-china.github.io/gopl-zh/ch12/ch12-07.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://ayusummer233.gitlab.io/dailynotesbackup/Language/Go/Go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F/CH1-%E5%85%A5%E9%97%A8.html#ch1-7-web%E6%9C%8D%E5%8A%A1",target:"_blank",rel:"noopener noreferrer"},P=n("hr",null,null,-1),C=n("p",null,"在4.5节我们使用构体成员标签用于设置对应JSON对应的名字。其中json成员标签让我们可以选择成员的名字和抑制零值成员的输出。在本节，我们将看到如何通过反射机制类获取成员标签。",-1),I=n("p",null,"对于一个web服务，大部分HTTP处理函数要做的第一件事情就是展开请求中的参数到本地变量中。我们定义了一个工具函数，叫params.Unpack，通过使用结构体成员标签机制来让HTTP处理函数解析请求参数更方便。",-1),F=n("p",null,"首先，我们看看如何使用它。下面的search函数是一个HTTP请求处理函数。它定义了一个匿名结构体类型的变量，用结构体的每个成员表示HTTP请求的参数。其中结构体成员标签指明了对于请求参数的名字，为了减少URL的长度这些参数名通常都是神秘的缩略词。Unpack将请求参数填充到合适的结构体成员中，这样我们可以方便地通过合适的类型类来访问这些参数。",-1),O={href:"https://github.com/adonovan/gopl.io/tree/master/ch12/search",target:"_blank",rel:"noopener noreferrer"},H=p(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">import</span> <span class="token string">&quot;gopl.io/ch12/params&quot;</span>

<span class="token comment">// search implements the /search URL endpoint.</span>
<span class="token keyword">func</span> <span class="token function">search</span><span class="token punctuation">(</span>resp http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> data <span class="token keyword">struct</span> <span class="token punctuation">{</span>
        Labels     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">\`http:&quot;l&quot;\`</span>
        MaxResults <span class="token builtin">int</span>      <span class="token string">\`http:&quot;max&quot;\`</span>
        Exact      <span class="token builtin">bool</span>     <span class="token string">\`http:&quot;x&quot;\`</span>
    <span class="token punctuation">}</span>
    data<span class="token punctuation">.</span>MaxResults <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment">// set default</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> params<span class="token punctuation">.</span><span class="token function">Unpack</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span> <span class="token comment">// 400</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// ...rest of handler...</span>
    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> <span class="token string">&quot;Search: %+v\\n&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的Unpack函数主要完成三件事情。</p><ul><li><p>第一，它调用 <code>req.ParseForm()</code> 来解析HTTP请求。</p></li><li><p>然后，<code>req.Form</code> 将包含所有的请求参数，不管HTTP客户端使用的是GET还是POST请求方法。</p></li><li><p>下一步，Unpack函数将构建每个结构体成员有效参数名字到成员变量的映射。</p><p>如果结构体成员有成员标签的话，有效参数名字可能和实际的成员名字不相同。</p><p><code>reflect.Type</code> 的Field方法将返回一个 <code>reflect.StructField</code>，里面含有每个成员的名字、类型和可选的成员标签等信息。</p><p>其中成员标签信息对应 <code>reflect.StructTag</code> 类型的字符串，并且提供了Get方法用于解析和根据特定key提取的子串，例如这里的http:&quot;...&quot;形式的子串。</p></li></ul><hr>`,4),D={href:"https://github.com/adonovan/gopl.io/tree/master/ch12/params",target:"_blank",rel:"noopener noreferrer"},N=p(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Unpack populates the fields of the struct pointed to by ptr</span>
<span class="token comment">// from the HTTP request parameters in req.</span>
<span class="token keyword">func</span> <span class="token function">Unpack</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> ptr <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> err <span class="token operator">:=</span> req<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> err
    <span class="token punctuation">}</span>

    <span class="token comment">// Build map of fields keyed by effective name.</span>
    fields <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>reflect<span class="token punctuation">.</span>Value<span class="token punctuation">)</span>
    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// the struct variable</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">NumField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        fieldInfo <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// a reflect.StructField</span>
        tag <span class="token operator">:=</span> fieldInfo<span class="token punctuation">.</span>Tag           <span class="token comment">// a reflect.StructTag</span>
        name <span class="token operator">:=</span> tag<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
            name <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span>fieldInfo<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        fields<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Update struct field for each parameter in the request.</span>
    <span class="token keyword">for</span> name<span class="token punctuation">,</span> values <span class="token operator">:=</span> <span class="token keyword">range</span> req<span class="token punctuation">.</span>Form <span class="token punctuation">{</span>
        f <span class="token operator">:=</span> fields<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">IsValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span> <span class="token comment">// ignore unrecognized HTTP parameters</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> values <span class="token punctuation">{</span>
            <span class="token keyword">if</span> f<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Slice <span class="token punctuation">{</span>
                elem <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Elem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">populate</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%s: %v&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                f<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>reflect<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">populate</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;%s: %v&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，Unpack遍历HTTP请求的name/valu参数键值对，并且根据更新相应的结构体成员。</p><p>回想一下，同一个名字的参数可能出现多次。如果发生这种情况，并且对应的结构体成员是一个slice，那么就将所有的参数添加到slice中。其它情况，对应的成员值将被覆盖，只有最后一次出现的参数值才是起作用的。</p><hr><p>populate函数小心用请求的字符串类型参数值来填充单一的成员v（或者是slice类型成员中的单一的元素）。目前，它仅支持字符串、有符号整数和布尔型。其中其它的类型将留做练习任务。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">populate</span><span class="token punctuation">(</span>v reflect<span class="token punctuation">.</span>Value<span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> v<span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>String<span class="token punctuation">:</span>
        v<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>

    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Int<span class="token punctuation">:</span>
        i<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>
        v<span class="token punctuation">.</span><span class="token function">SetInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

    <span class="token keyword">case</span> reflect<span class="token punctuation">.</span>Bool<span class="token punctuation">:</span>
        b<span class="token punctuation">,</span> err <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseBool</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> err
        <span class="token punctuation">}</span>
        v<span class="token punctuation">.</span><span class="token function">SetBool</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

    <span class="token keyword">default</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unsupported kind %s&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们上上面的处理程序添加到一个web服务器，则可以产生以下的会话：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ go build gopl.io/ch12/search
$ ./search <span class="token operator">&amp;</span>
$ ./fetch <span class="token string">&#39;http://localhost:12345/search&#39;</span>
Search: <span class="token punctuation">{</span>Labels:<span class="token punctuation">[</span><span class="token punctuation">]</span> MaxResults:10 Exact:false<span class="token punctuation">}</span>
$ ./fetch <span class="token string">&#39;http://localhost:12345/search?l=golang&amp;l=programming&#39;</span>
Search: <span class="token punctuation">{</span>Labels:<span class="token punctuation">[</span>golang programming<span class="token punctuation">]</span> MaxResults:10 Exact:false<span class="token punctuation">}</span>
$ ./fetch <span class="token string">&#39;http://localhost:12345/search?l=golang&amp;l=programming&amp;max=100&#39;</span>
Search: <span class="token punctuation">{</span>Labels:<span class="token punctuation">[</span>golang programming<span class="token punctuation">]</span> MaxResults:100 Exact:false<span class="token punctuation">}</span>
$ ./fetch <span class="token string">&#39;http://localhost:12345/search?x=true&amp;l=golang&amp;l=programming&#39;</span>
Search: <span class="token punctuation">{</span>Labels:<span class="token punctuation">[</span>golang programming<span class="token punctuation">]</span> MaxResults:10 Exact:true<span class="token punctuation">}</span>
$ ./fetch <span class="token string">&#39;http://localhost:12345/search?q=hello&amp;x=123&#39;</span>
x: strconv.ParseBool: parsing <span class="token string">&quot;123&quot;</span><span class="token builtin class-name">:</span> invalid syntax
$ ./fetch <span class="token string">&#39;http://localhost:12345/search?q=hello&amp;max=lots&#39;</span>
max: strconv.ParseInt: parsing <span class="token string">&quot;lots&quot;</span><span class="token builtin class-name">:</span> invalid syntax
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="ch12-8-显示一个类型的方法集" tabindex="-1"><a class="header-anchor" href="#ch12-8-显示一个类型的方法集"><span>CH12.8. 显示一个类型的方法集</span></a></h2><p>我们的最后一个例子是使用reflect.Type来打印任意值的类型和枚举它的方法：</p>`,11),G={href:"https://github.com/adonovan/gopl.io/tree/master/ch12/methods",target:"_blank",rel:"noopener noreferrer"},M=p(`<div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Print prints the method set of the value x.</span>
<span class="token keyword">func</span> <span class="token function">Print</span><span class="token punctuation">(</span>x <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    v <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    t <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;type %s\\n&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">NumMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
        methType <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;func (%s) %s%s\\n&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">Method</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
            strings<span class="token punctuation">.</span><span class="token function">TrimPrefix</span><span class="token punctuation">(</span>methType<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;func&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>reflect.Type和reflect.Value都提供了一个Method方法。每次t.Method(i)调用将一个reflect.Method的实例，对应一个用于描述一个方法的名称和类型的结构体。</p><p>每次 <code>v.Method(i)</code> 方法调用都返回一个 <code>reflect.Value</code> 以表示对应的值（§6.4），也就是一个方法是绑到它的接收者的。</p><p>使用 <code>reflect.Value.Call</code> 方法（我们这里没有演示），将可以调用一个Func类型的Value，但是这个例子中只用到了它的类型。</p><hr><p>这是属于 <code>time.Duration</code>和<code>*strings.Replacer</code>两个类型的方法：</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>methods<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Hour<span class="token punctuation">)</span>
<span class="token comment">// Output:</span>
<span class="token comment">// type time.Duration</span>
<span class="token comment">// func (time.Duration) Hours() float64</span>
<span class="token comment">// func (time.Duration) Minutes() float64</span>
<span class="token comment">// func (time.Duration) Nanoseconds() int64</span>
<span class="token comment">// func (time.Duration) Seconds() float64</span>
<span class="token comment">// func (time.Duration) String() string</span>

methods<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span>Replacer<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Output:</span>
<span class="token comment">// type *strings.Replacer</span>
<span class="token comment">// func (*strings.Replacer) Replace(string) string</span>
<span class="token comment">// func (*strings.Replacer) WriteString(io.Writer, string) (int, error)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="ch12-9-几点忠告" tabindex="-1"><a class="header-anchor" href="#ch12-9-几点忠告"><span>CH12.9. 几点忠告</span></a></h2>`,9),U={href:"https://golang-china.github.io/gopl-zh/ch12/ch12-09.html",target:"_blank",rel:"noopener noreferrer"},L=p(`<p>虽然反射提供的API远多于我们讲到的，我们前面的例子主要是给出了一个方向，通过反射可以实现哪些功能。反射是一个强大并富有表达力的工具，但是它应该被小心地使用，原因有三。</p><ul><li><p>第一个原因是，基于反射的代码是比较脆弱的。对于每一个会导致编译器报告类型错误的问题，在反射中都有与之相对应的误用问题，不同的是编译器会在构建时马上报告错误，而反射则是在真正运行到的时候才会抛出panic异常，可能是写完代码很久之后了，而且程序也可能运行了很长的时间。</p><p>以前面的readList函数（§12.6）为例，为了从输入读取字符串并填充int类型的变量而调用的reflect.Value.SetString方法可能导致panic异常。绝大多数使用反射的程序都有类似的风险，需要非常小心地检查每个reflect.Value的对应值的类型、是否可取地址，还有是否可以被修改等。</p><p>避免这种因反射而导致的脆弱性的问题的最好方法，是将所有的反射相关的使用控制在包的内部，如果可能的话避免在包的API中直接暴露reflect.Value类型，这样可以限制一些非法输入。如果无法做到这一点，在每个有风险的操作前指向额外的类型检查。以标准库中的代码为例，当fmt.Printf收到一个非法的操作数时，它并不会抛出panic异常，而是打印相关的错误信息。程序虽然还有BUG，但是会更加容易诊断。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %s\\n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token comment">// &quot;%!d(string=hello) %!s(int=42)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>反射同样降低了程序的安全性，还影响了自动化重构和分析工具的准确性，因为它们无法识别运行时才能确认的类型信息。</p></li><li><p>避免使用反射的第二个原因是，即使对应类型提供了相同文档，但是反射的操作不能做静态类型检查，而且大量反射的代码通常难以理解。总是需要小心翼翼地为每个导出的类型和其它接受interface{}或reflect.Value类型参数的函数维护说明文档。</p></li><li><p>第三个原因，基于反射的代码通常比正常的代码运行速度慢一到两个数量级。对于一个典型的项目，大部分函数的性能和程序的整体性能关系不大，所以当反射能使程序更加清晰的时候可以考虑使用。</p><p>测试是一个特别适合使用反射的场景，因为每个测试的数据集都很小。</p><p>但是对于性能关键路径的函数，最好避免使用反射。</p></li></ul><hr>`,3);function K(R,W){const a=o("ExternalLinkIcon");return c(),l("div",null,[i,n("blockquote",null,[n("p",null,[n("a",k,[s("反射 - Go语言圣经 (golang-china.github.io)"),t(a)])])]),r,n("blockquote",null,[n("p",null,[n("a",d,[s("为何需要反射? - Go语言圣经 (golang-china.github.io)"),t(a)])])]),v,n("blockquote",null,[n("p",null,[n("a",m,[s("reflect.Type和reflect.Value - Go语言圣经 (golang-china.github.io)"),t(a)])])]),f,n("blockquote",null,[n("p",null,[n("a",b,[s("Display递归打印 - Go语言圣经 (golang-china.github.io)"),t(a)])])]),g,n("blockquote",null,[n("p",null,[n("a",h,[s("示例: 编码S表达式 - Go语言圣经 (golang-china.github.io)"),t(a)])])]),y,n("p",null,[n("a",q,[s("gopl.io/ch12/sexpr at master · adonovan/gopl.io · GitHub"),t(a)])]),x,n("blockquote",null,[n("p",null,[n("a",w,[s("通过reflect.Value修改值 - Go语言圣经 (golang-china.github.io)"),t(a)])])]),E,n("blockquote",null,[n("p",null,[n("a",S,[s("示例: 解码S表达式 - Go语言圣经 (golang-china.github.io)"),t(a)])])]),B,n("p",null,[n("a",V,[s("gopl.io/ch12/sexpr at master · adonovan/gopl.io · GitHub"),t(a)])]),A,n("blockquote",null,[n("p",null,[n("a",T,[s("获取结构体字段标签 - Go语言圣经 (golang-china.github.io)"),t(a)])])]),n("p",null,[s("我们在 "),n("a",_,[s("CH1 入门 | DailyNotes (ayusummer233.gitlab.io)"),t(a)]),s(" 的时候已经见过了基础的 Web 服务器写法, 当时我们对 URL Path 和 Body 进行了处理, 这一节则讲了使用反射展开 Query")]),P,C,I,F,n("p",null,[n("a",O,[s("gopl.io/ch12/search at master · adonovan/gopl.io · GitHub"),t(a)])]),H,n("p",null,[n("a",D,[s("gopl.io/ch12/params at master · adonovan/gopl.io · GitHub"),t(a)])]),N,n("p",null,[n("a",G,[s("gopl.io/ch12/methods at master · adonovan/gopl.io · GitHub"),t(a)])]),M,n("blockquote",null,[n("p",null,[n("a",U,[s("几点忠告 - Go语言圣经 (golang-china.github.io)"),t(a)])])]),L])}const $=e(u,[["render",K],["__file","CH12-反射.html.vue"]]),j=JSON.parse('{"path":"/Language/Go/Go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F/CH12-%E5%8F%8D%E5%B0%84.html","title":"CH12.反射","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"CH12.1.为何需要反射","slug":"ch12-1-为何需要反射","link":"#ch12-1-为何需要反射","children":[]},{"level":2,"title":"CH12.2.reflect.Type 和 reflect.Value","slug":"ch12-2-reflect-type-和-reflect-value","link":"#ch12-2-reflect-type-和-reflect-value","children":[{"level":3,"title":"reflect.Type","slug":"reflect-type","link":"#reflect-type","children":[]},{"level":3,"title":"reflect.Value","slug":"reflect-value","link":"#reflect-value","children":[]}]},{"level":2,"title":"CH12.3. Display，一个递归的值打印器","slug":"ch12-3-display-一个递归的值打印器","link":"#ch12-3-display-一个递归的值打印器","children":[]},{"level":2,"title":"CH12.4. 示例: 编码为S表达式","slug":"ch12-4-示例-编码为s表达式","link":"#ch12-4-示例-编码为s表达式","children":[]},{"level":2,"title":"CH12.5. 通过reflect.Value修改值","slug":"ch12-5-通过reflect-value修改值","link":"#ch12-5-通过reflect-value修改值","children":[]},{"level":2,"title":"CH12.6. 示例: 解码S表达式","slug":"ch12-6-示例-解码s表达式","link":"#ch12-6-示例-解码s表达式","children":[]},{"level":2,"title":"CH12.7. 获取结构体字段标签","slug":"ch12-7-获取结构体字段标签","link":"#ch12-7-获取结构体字段标签","children":[]},{"level":2,"title":"CH12.8. 显示一个类型的方法集","slug":"ch12-8-显示一个类型的方法集","link":"#ch12-8-显示一个类型的方法集","children":[]},{"level":2,"title":"CH12.9. 几点忠告","slug":"ch12-9-几点忠告","link":"#ch12-9-几点忠告","children":[]}],"git":{"createdTime":1721704766000,"updatedTime":1722423759000,"contributors":[{"name":"233JG","email":"ayusummer233@gmail.com","commits":2},{"name":"ayusummer233","email":"ayusummer233@gmail.com","commits":2},{"name":"233PC","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":33.75,"words":10126},"filePathRelative":"Language/Go/Go语言圣经/CH12-反射.md","localizedDate":"2024年7月23日","excerpt":"\\n<hr>\\n<ul>\\n<li><a href=\\"#ch12%E5%8F%8D%E5%B0%84\\">CH12.反射</a>\\n<ul>\\n<li><a href=\\"#ch121%E4%B8%BA%E4%BD%95%E9%9C%80%E8%A6%81%E5%8F%8D%E5%B0%84\\">CH12.1.为何需要反射</a></li>\\n<li><a href=\\"#ch122reflecttype-%E5%92%8C-reflectvalue\\">CH12.2.reflect.Type 和 reflect.Value</a>\\n<ul>\\n<li><a href=\\"#reflecttype\\">reflect.Type</a></li>\\n<li><a href=\\"#reflectvalue\\">reflect.Value</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#ch123-display%E4%B8%80%E4%B8%AA%E9%80%92%E5%BD%92%E7%9A%84%E5%80%BC%E6%89%93%E5%8D%B0%E5%99%A8\\">CH12.3. Display，一个递归的值打印器</a></li>\\n<li><a href=\\"#ch124-%E7%A4%BA%E4%BE%8B-%E7%BC%96%E7%A0%81%E4%B8%BAs%E8%A1%A8%E8%BE%BE%E5%BC%8F\\">CH12.4. 示例: 编码为S表达式</a></li>\\n<li><a href=\\"#ch125-%E9%80%9A%E8%BF%87reflectvalue%E4%BF%AE%E6%94%B9%E5%80%BC\\">CH12.5. 通过reflect.Value修改值</a></li>\\n<li><a href=\\"#ch126-%E7%A4%BA%E4%BE%8B-%E8%A7%A3%E7%A0%81s%E8%A1%A8%E8%BE%BE%E5%BC%8F\\">CH12.6. 示例: 解码S表达式</a></li>\\n<li><a href=\\"#ch127-%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%84%E4%BD%93%E5%AD%97%E6%AE%B5%E6%A0%87%E7%AD%BE\\">CH12.7. 获取结构体字段标签</a></li>\\n<li><a href=\\"#ch128-%E6%98%BE%E7%A4%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95%E9%9B%86\\">CH12.8. 显示一个类型的方法集</a></li>\\n<li><a href=\\"#ch129-%E5%87%A0%E7%82%B9%E5%BF%A0%E5%91%8A\\">CH12.9. 几点忠告</a></li>\\n</ul>\\n</li>\\n</ul>"}');export{$ as comp,j as data};
