import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,d as t,b as p,e as s}from"./app-BT-bWAve.js";const i={},u=s(`<h1 id="ch5-函数" tabindex="-1"><a class="header-anchor" href="#ch5-函数"><span>CH5-函数</span></a></h1><hr><ul><li><a href="#ch5-%E5%87%BD%E6%95%B0">CH5-函数</a><ul><li><a href="#ch51%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E">CH5.1.函数声明</a></li><li><a href="#ch52%E9%80%92%E5%BD%92">CH5.2.递归</a><ul><li><a href="#ex51%E5%BE%AA%E7%8E%AF%E6%94%B9%E9%80%92%E5%BD%92">EX5.1.循环改递归</a></li><li><a href="#ex52%E8%AE%B0%E5%BD%95%E5%90%8C%E5%90%8D%E5%85%83%E7%B4%A0%E6%AC%A1%E6%95%B0">EX5.2.记录同名元素次数</a></li><li><a href="#ex53%E9%80%89%E6%8B%A9%E6%80%A7%E8%BE%93%E5%87%BA%E8%8A%82%E7%82%B9%E5%86%85%E5%AE%B9">EX5.3.选择性输出节点内容</a></li><li><a href="#ex54%E5%A4%84%E7%90%86%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B%E8%8A%82%E7%82%B9">EX5.4.处理其他类型节点</a></li></ul></li><li><a href="#ch53%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC">CH5.3.多返回值</a><ul><li><a href="#ex55%E7%BB%9F%E8%AE%A1%E5%8D%95%E8%AF%8D%E5%92%8C%E5%9B%BE%E7%89%87%E7%9A%84%E6%95%B0%E9%87%8F">EX5.5.统计单词和图片的数量</a></li><li><a href="#ex56bare-return">EX5.6.bare return</a></li></ul></li><li><a href="#ch54%E9%94%99%E8%AF%AF">CH5.4.错误</a></li><li><a href="#ch55%E5%87%BD%E6%95%B0%E5%80%BC">CH5.5.函数值</a><ul><li><a href="#ex57%E9%80%9A%E7%94%A8html%E8%BE%93%E5%87%BA%E5%99%A8">EX5.7.通用HTML输出器</a></li><li><a href="#ex58%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0">EX5.8.查找元素</a></li><li><a href="#ex59expad">EX5.9.expad</a></li></ul></li><li><a href="#ch56%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0">CH5.6.匿名函数</a></li><li><a href="#ch57%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0">CH5.7.可变参数</a></li><li><a href="#ch58deferred%E5%87%BD%E6%95%B0">CH5.8.Deferred函数</a></li><li><a href="#ch59panic%E5%BC%82%E5%B8%B8ch510recover%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8">CH5.9.Panic异常.CH5.10.Recover捕获异常</a></li></ul></li></ul><hr><h2 id="ch5-1-函数声明" tabindex="-1"><a class="header-anchor" href="#ch5-1-函数声明"><span>CH5.1.函数声明</span></a></h2><h2 id="ch5-2-递归" tabindex="-1"><a class="header-anchor" href="#ch5-2-递归"><span>CH5.2.递归</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// Findlinks1 prints the links in an HTML document read from standard input.</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;os&quot;</span>

	<span class="token string">&quot;golang.org/x/net/html&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	doc<span class="token punctuation">,</span> err <span class="token operator">:=</span> html<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;findlinks1: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> link <span class="token operator">:=</span> <span class="token keyword">range</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> doc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// visit appends to links each link found in n and returns the result.</span>
<span class="token keyword">func</span> <span class="token function">visit</span><span class="token punctuation">(</span>links <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>ElementNode <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>Data <span class="token operator">==</span> <span class="token string">&quot;a&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> a <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>Attr <span class="token punctuation">{</span>
			<span class="token keyword">if</span> a<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">&quot;href&quot;</span> <span class="token punctuation">{</span>
				links <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>links<span class="token punctuation">,</span> a<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> c <span class="token operator">:=</span> n<span class="token punctuation">.</span>FirstChild<span class="token punctuation">;</span> c <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> c <span class="token operator">=</span> c<span class="token punctuation">.</span>NextSibling <span class="token punctuation">{</span>
		links <span class="token operator">=</span> <span class="token function">visit</span><span class="token punctuation">(</span>links<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> links
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240528113327462.png" alt="image-20240528113327462"></p><ul><li><code>range</code> 关键字用于迭代各种数据结构，包括数组、切片、映射（map）、字符串和通道（channel）。在这里，<code>range</code> 用于迭代一个切片。</li></ul><hr><h3 id="ex5-1-循环改递归" tabindex="-1"><a class="header-anchor" href="#ex5-1-循环改递归"><span>EX5.1.循环改递归</span></a></h3><p><strong>练习 5.1：</strong> 修改findlinks代码中遍历n.FirstChild链表的部分，将循环调用visit，改成递归调用。</p><p>需要修改的代码是</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">for</span> c <span class="token operator">:=</span> n<span class="token punctuation">.</span>FirstChild<span class="token punctuation">;</span> c <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> c <span class="token operator">=</span> c<span class="token punctuation">.</span>NextSibling <span class="token punctuation">{</span>
		links <span class="token operator">=</span> <span class="token function">visit</span><span class="token punctuation">(</span>links<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环实现的功能是向子节点索引, 为空则向兄弟节点索引</p><p>改成递归则需要在函数开头加个节点判空, 然后直接对兄弟和孩子节点调用函数即可</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">visit</span><span class="token punctuation">(</span>links <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> links
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>ElementNode <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>Data <span class="token operator">==</span> <span class="token string">&quot;a&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> a <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>Attr <span class="token punctuation">{</span>
			<span class="token keyword">if</span> a<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">&quot;href&quot;</span> <span class="token punctuation">{</span>
				links <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>links<span class="token punctuation">,</span> a<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	links <span class="token operator">=</span> <span class="token function">visit</span><span class="token punctuation">(</span>links<span class="token punctuation">,</span> n<span class="token punctuation">.</span>FirstChild<span class="token punctuation">)</span>  <span class="token comment">// 递归调用遍历第一个子节点</span>
	links <span class="token operator">=</span> <span class="token function">visit</span><span class="token punctuation">(</span>links<span class="token punctuation">,</span> n<span class="token punctuation">.</span>NextSibling<span class="token punctuation">)</span> <span class="token comment">// 递归调用遍历下一个兄弟节点</span>
	<span class="token keyword">return</span> links
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240528133708086.png" alt="image-20240528133708086"></p><hr><h3 id="ex5-2-记录同名元素次数" tabindex="-1"><a class="header-anchor" href="#ex5-2-记录同名元素次数"><span>EX5.2.记录同名元素次数</span></a></h3><p><strong>练习 5.2：</strong> 编写函数，记录在HTML树中出现的同名元素的次数。</p><p>在遍历的基础上加上一个字典统计元素出现次数即可</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;os&quot;</span>

	<span class="token string">&quot;golang.org/x/net/html&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	doc<span class="token punctuation">,</span> err <span class="token operator">:=</span> html<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;findelements: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	elementsCount <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token function">countElements</span><span class="token punctuation">(</span>elementsCount<span class="token punctuation">,</span> doc<span class="token punctuation">)</span>
	<span class="token keyword">for</span> element<span class="token punctuation">,</span> count <span class="token operator">:=</span> <span class="token keyword">range</span> elementsCount <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s: %d\\n&quot;</span><span class="token punctuation">,</span> element<span class="token punctuation">,</span> count<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// countElements 递归遍历 HTML 树，并记录每种元素的出现次数。</span>
<span class="token keyword">func</span> <span class="token function">countElements</span><span class="token punctuation">(</span>elementsCount <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>ElementNode <span class="token punctuation">{</span>
		elementsCount<span class="token punctuation">[</span>n<span class="token punctuation">.</span>Data<span class="token punctuation">]</span><span class="token operator">++</span>
	<span class="token punctuation">}</span>
	<span class="token function">countElements</span><span class="token punctuation">(</span>elementsCount<span class="token punctuation">,</span> n<span class="token punctuation">.</span>FirstChild<span class="token punctuation">)</span>  <span class="token comment">// 递归遍历第一个子节点</span>
	<span class="token function">countElements</span><span class="token punctuation">(</span>elementsCount<span class="token punctuation">,</span> n<span class="token punctuation">.</span>NextSibling<span class="token punctuation">)</span> <span class="token comment">// 递归遍历下一个兄弟节点</span>
<span class="token punctuation">}</span>

<span class="token comment">// go build</span>
<span class="token comment">// ..\\findlinks1\\CH1-5-GetURL.exe https://golang.org | .\\ex5_2.exe</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240528134107044.png" alt="image-20240528134107044"></p><hr><h3 id="ex5-3-选择性输出节点内容" tabindex="-1"><a class="header-anchor" href="#ex5-3-选择性输出节点内容"><span>EX5.3.选择性输出节点内容</span></a></h3><p><strong>练习 5.3：</strong> 编写函数输出所有text结点的内容。注意不要访问<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>元素，因为这些元素对浏览者是不可见的。</p><p>用 <code>n.Type == html.TextNode </code> 来判断 text 节点, 用 <code>n.Type == html.ElementNode &amp;&amp; (n.Data == &quot;script&quot; || n.Data == &quot;style&quot;)</code> 来过滤不需要的节点即可</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;os&quot;</span>

	<span class="token string">&quot;golang.org/x/net/html&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	doc<span class="token punctuation">,</span> err <span class="token operator">:=</span> html<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;findtext: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token function">printTextNodes</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// printTextNodes 递归遍历 HTML 树，并输出所有文本节点的内容</span>
<span class="token keyword">func</span> <span class="token function">printTextNodes</span><span class="token punctuation">(</span>n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>TextNode <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>ElementNode <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>Data <span class="token operator">==</span> <span class="token string">&quot;script&quot;</span> <span class="token operator">||</span> n<span class="token punctuation">.</span>Data <span class="token operator">==</span> <span class="token string">&quot;style&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 跳过 &lt;script&gt; 和 &lt;style&gt; 元素</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token comment">// 递归处理第一个子节点</span>
	<span class="token function">printTextNodes</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>FirstChild<span class="token punctuation">)</span>
	<span class="token comment">// 递归处理下一个兄弟节点</span>
	<span class="token function">printTextNodes</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>NextSibling<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// go build</span>
<span class="token comment">// ..\\findlinks1\\CH1-5-GetURL.exe https://golang.org | .\\ex5_3.exe</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240528134612457.png" alt="image-20240528134612457"></p><hr><h3 id="ex5-4-处理其他类型节点" tabindex="-1"><a class="header-anchor" href="#ex5-4-处理其他类型节点"><span>EX5.4.处理其他类型节点</span></a></h3><p><strong>练习 5.4：</strong> 扩展visit函数，使其能够处理其他类型的结点，如images、scripts和style sheets。</p><ul><li><p><strong>样式表（style sheets）</strong> 是用来控制网页元素显示样式的文件或代码片段。最常见的样式表类型是 <strong>CSS（Cascading Style Sheets，层叠样式表）</strong>。样式表定义了如何展示 HTML 元素，包括颜色、字体、布局等。</p><p>在 HTML 文件中，可以通过 <code>&lt;link&gt;</code> 标签引用这个样式表：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Example Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>styles.css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>This is a heading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>在 <code>EX5.1</code> 的基础上多加几个处理类型即可</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">switch</span> n<span class="token punctuation">.</span>Data <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span>
			<span class="token operator">...</span>
		<span class="token keyword">case</span> <span class="token string">&quot;img&quot;</span><span class="token punctuation">:</span>
			<span class="token operator">...</span>
		<span class="token keyword">case</span> <span class="token string">&quot;script&quot;</span><span class="token punctuation">:</span>
			<span class="token operator">...</span>
		<span class="token keyword">case</span> <span class="token string">&quot;link&quot;</span><span class="token punctuation">:</span>
			<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;os&quot;</span>

	<span class="token string">&quot;golang.org/x/net/html&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	doc<span class="token punctuation">,</span> err <span class="token operator">:=</span> html<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;findelements: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	links<span class="token punctuation">,</span> images<span class="token punctuation">,</span> scripts<span class="token punctuation">,</span> styles <span class="token operator">:=</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> doc<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Links:&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> link <span class="token operator">:=</span> <span class="token keyword">range</span> links <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Images:&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> img <span class="token operator">:=</span> <span class="token keyword">range</span> images <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Scripts:&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> script <span class="token operator">:=</span> <span class="token keyword">range</span> scripts <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Styles:&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> style <span class="token operator">:=</span> <span class="token keyword">range</span> styles <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>style<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// visit 递归遍历 HTML 树，收集不同类型节点的信息。</span>
<span class="token keyword">func</span> <span class="token function">visit</span><span class="token punctuation">(</span>links<span class="token punctuation">,</span> images<span class="token punctuation">,</span> scripts<span class="token punctuation">,</span> styles <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> links<span class="token punctuation">,</span> images<span class="token punctuation">,</span> scripts<span class="token punctuation">,</span> styles
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>ElementNode <span class="token punctuation">{</span>
		<span class="token keyword">switch</span> n<span class="token punctuation">.</span>Data <span class="token punctuation">{</span>
		<span class="token keyword">case</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span>
			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> a <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>Attr <span class="token punctuation">{</span>
				<span class="token keyword">if</span> a<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">&quot;href&quot;</span> <span class="token punctuation">{</span>
					links <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>links<span class="token punctuation">,</span> a<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token keyword">case</span> <span class="token string">&quot;img&quot;</span><span class="token punctuation">:</span>
			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> a <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>Attr <span class="token punctuation">{</span>
				<span class="token keyword">if</span> a<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">&quot;src&quot;</span> <span class="token punctuation">{</span>
					images <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>images<span class="token punctuation">,</span> a<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token keyword">case</span> <span class="token string">&quot;script&quot;</span><span class="token punctuation">:</span>
			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> a <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>Attr <span class="token punctuation">{</span>
				<span class="token keyword">if</span> a<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">&quot;src&quot;</span> <span class="token punctuation">{</span>
					scripts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>scripts<span class="token punctuation">,</span> a<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token keyword">case</span> <span class="token string">&quot;link&quot;</span><span class="token punctuation">:</span>
			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> a <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>Attr <span class="token punctuation">{</span>
				<span class="token keyword">if</span> a<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">&quot;rel&quot;</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>Val <span class="token operator">==</span> <span class="token string">&quot;stylesheet&quot;</span> <span class="token punctuation">{</span>
					<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> a <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>Attr <span class="token punctuation">{</span>
						<span class="token keyword">if</span> a<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">&quot;href&quot;</span> <span class="token punctuation">{</span>
							styles <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>styles<span class="token punctuation">,</span> a<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	links<span class="token punctuation">,</span> images<span class="token punctuation">,</span> scripts<span class="token punctuation">,</span> styles <span class="token operator">=</span> <span class="token function">visit</span><span class="token punctuation">(</span>links<span class="token punctuation">,</span> images<span class="token punctuation">,</span> scripts<span class="token punctuation">,</span> styles<span class="token punctuation">,</span> n<span class="token punctuation">.</span>FirstChild<span class="token punctuation">)</span>
	links<span class="token punctuation">,</span> images<span class="token punctuation">,</span> scripts<span class="token punctuation">,</span> styles <span class="token operator">=</span> <span class="token function">visit</span><span class="token punctuation">(</span>links<span class="token punctuation">,</span> images<span class="token punctuation">,</span> scripts<span class="token punctuation">,</span> styles<span class="token punctuation">,</span> n<span class="token punctuation">.</span>NextSibling<span class="token punctuation">)</span>
	<span class="token keyword">return</span> links<span class="token punctuation">,</span> images<span class="token punctuation">,</span> scripts<span class="token punctuation">,</span> styles
<span class="token punctuation">}</span>

<span class="token comment">// go build</span>
<span class="token comment">// ..\\findlinks1\\CH1-5-GetURL.exe https://golang.org | .\\ex5_4.exe</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240528135543268.png" alt="image-20240528135543268"></p><hr><h2 id="ch5-3-多返回值" tabindex="-1"><a class="header-anchor" href="#ch5-3-多返回值"><span>CH5.3.多返回值</span></a></h2><h3 id="ex5-5-统计单词和图片的数量" tabindex="-1"><a class="header-anchor" href="#ex5-5-统计单词和图片的数量"><span>EX5.5.统计单词和图片的数量</span></a></h3><p><strong>练习 5.5：</strong> 实现countWordsAndImages</p><p>和上一节的练习差不多</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;os&quot;</span>
	<span class="token string">&quot;strings&quot;</span>

	<span class="token string">&quot;golang.org/x/net/html&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 示例：统计指定 URL 的单词和图片数量</span>
	url <span class="token operator">:=</span> <span class="token string">&quot;https://golang.org&quot;</span>
	words<span class="token punctuation">,</span> images<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">CountWordsAndImages</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;Error: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Words: %d, Images: %d\\n&quot;</span><span class="token punctuation">,</span> words<span class="token punctuation">,</span> images<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// CountWordsAndImages 统计给定 URL 网页中的单词和图片数量</span>
<span class="token keyword">func</span> <span class="token function">CountWordsAndImages</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>words<span class="token punctuation">,</span> images <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	doc<span class="token punctuation">,</span> err <span class="token operator">:=</span> html<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
	resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		err <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;parsing HTML: %s&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	words<span class="token punctuation">,</span> images <span class="token operator">=</span> <span class="token function">countWordsAndImages</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token comment">// countWordsAndImages 遍历 HTML 文档树，统计单词和图片数量</span>
<span class="token keyword">func</span> <span class="token function">countWordsAndImages</span><span class="token punctuation">(</span>n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token punctuation">(</span>words<span class="token punctuation">,</span> images <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>TextNode <span class="token punctuation">{</span>
		words <span class="token operator">+=</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token function">splitWords</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>ElementNode <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>Data <span class="token operator">==</span> <span class="token string">&quot;img&quot;</span> <span class="token punctuation">{</span>
		images<span class="token operator">++</span>
	<span class="token punctuation">}</span>
	wordsChild<span class="token punctuation">,</span> imagesChild <span class="token operator">:=</span> <span class="token function">countWordsAndImages</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>FirstChild<span class="token punctuation">)</span>
	wordsSibling<span class="token punctuation">,</span> imagesSibling <span class="token operator">:=</span> <span class="token function">countWordsAndImages</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>NextSibling<span class="token punctuation">)</span>
	words <span class="token operator">+=</span> wordsChild <span class="token operator">+</span> wordsSibling
	images <span class="token operator">+=</span> imagesChild <span class="token operator">+</span> imagesSibling
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

<span class="token comment">// splitWords 将文本节点内容按空格分割成单词</span>
<span class="token keyword">func</span> <span class="token function">splitWords</span><span class="token punctuation">(</span>text <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token comment">// 可以使用 strings.Fields 函数按空格分割文本</span>
	<span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">Fields</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240528143156574.png" alt="image-20240528143156574"></p><hr><h3 id="ex5-6-bare-return" tabindex="-1"><a class="header-anchor" href="#ex5-6-bare-return"><span>EX5.6.bare return</span></a></h3><p><strong>练习 5.6：</strong> 修改gopl.io/ch3/surface（§3.2）中的corner函数，将返回值命名，并使用bare return</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">corner</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>sx<span class="token punctuation">,</span> sy <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 找到网格单元 (i,j) 的角点 (x,y)。</span>
	x <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>
	y <span class="token operator">:=</span> xyrange <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">/</span>cells <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span>

	<span class="token comment">// 计算表面高度 z。</span>
	z <span class="token operator">:=</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

	<span class="token comment">// 将 (x,y,z) 等轴测投影到 2D SVG 画布 (sx,sy) 上。</span>
	sx <span class="token operator">=</span> width<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">*</span>cos30<span class="token operator">*</span>xyscale
	sy <span class="token operator">=</span> height<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span>sin30<span class="token operator">*</span>xyscale <span class="token operator">-</span> z<span class="token operator">*</span>zscale
	<span class="token keyword">return</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="ch5-4-错误" tabindex="-1"><a class="header-anchor" href="#ch5-4-错误"><span>CH5.4.错误</span></a></h2><h2 id="ch5-5-函数值" tabindex="-1"><a class="header-anchor" href="#ch5-5-函数值"><span>CH5.5.函数值</span></a></h2><h3 id="ex5-7-通用html输出器" tabindex="-1"><a class="header-anchor" href="#ex5-7-通用html输出器"><span>EX5.7.通用HTML输出器</span></a></h3><p><strong>练习 5.7：</strong> 完善startElement和endElement函数，使其成为通用的HTML输出器。要求：输出注释结点，文本结点以及每个元素的属性（&lt; a href=&#39;...&#39;&gt;）。使用简略格式输出没有孩子结点的元素（即用<code>&lt;img/&gt;</code>代替<code>&lt;img&gt;&lt;/img&gt;</code>）。编写测试，验证程序输出的格式正确。（详见11章）</p><blockquote><p>单元测试就不写了, 到11章再看(</p></blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;os&quot;</span>

	<span class="token string">&quot;golang.org/x/net/html&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> depth <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> url <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
		err <span class="token operator">:=</span> <span class="token function">printHTMLStructure</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;error: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">printHTMLStructure</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;getting %s: %v&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> resp<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">{</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;getting %s: %s&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Status<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	doc<span class="token punctuation">,</span> err <span class="token operator">:=</span> html<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;parsing HTML: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token function">forEachNode</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> startElement<span class="token punctuation">,</span> endElement<span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">forEachNode</span><span class="token punctuation">(</span>n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> post <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> pre <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">pre</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> c <span class="token operator">:=</span> n<span class="token punctuation">.</span>FirstChild<span class="token punctuation">;</span> c <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> c <span class="token operator">=</span> c<span class="token punctuation">.</span>NextSibling <span class="token punctuation">{</span>
		<span class="token function">forEachNode</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> post<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> post <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">post</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">startElement</span><span class="token punctuation">(</span>n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>ElementNode <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%*s&lt;%s&quot;</span><span class="token punctuation">,</span> depth<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> attr <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>Attr <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot; %s=&#39;%s&#39;&quot;</span><span class="token punctuation">,</span> attr<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> attr<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> n<span class="token punctuation">.</span>FirstChild <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;/&gt;\\n&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;\\n&quot;</span><span class="token punctuation">)</span>
			depth<span class="token operator">++</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>CommentNode <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%*s&lt;!-- %s --&gt;\\n&quot;</span><span class="token punctuation">,</span> depth<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>TextNode <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%*s%s\\n&quot;</span><span class="token punctuation">,</span> depth<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">endElement</span><span class="token punctuation">(</span>n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>ElementNode <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>FirstChild <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		depth<span class="token operator">--</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%*s&lt;/%s&gt;\\n&quot;</span><span class="token punctuation">,</span> depth<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240528160454600.png" alt="image-20240528160454600"></p><hr><h3 id="ex5-8-查找元素" tabindex="-1"><a class="header-anchor" href="#ex5-8-查找元素"><span>EX5.8.查找元素</span></a></h3><p><strong>练习 5.8：</strong> 修改pre和post函数，使其返回布尔类型的返回值。返回false时，中止forEachNoded的遍历。使用修改后的代码编写ElementByID函数，根据用户输入的id查找第一个拥有该id元素的HTML元素，查找成功后，停止遍历。</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
	<span class="token string">&quot;os&quot;</span>

	<span class="token string">&quot;golang.org/x/net/html&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> depth <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Usage: go run main.go &lt;url&gt; &lt;id&gt;&quot;</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	url <span class="token operator">:=</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
	id <span class="token operator">:=</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>

	node<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">ElementByID</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> id<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;error: %v\\n&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> node <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Found node: \\n&quot;</span><span class="token punctuation">)</span>
		<span class="token function">forEachNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> startElement<span class="token punctuation">,</span> endElement<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Node with id=&#39;%s&#39; not found\\n&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">ElementByID</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;getting %s: %v&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> resp<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;getting %s: %s&quot;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Status<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	doc<span class="token punctuation">,</span> err <span class="token operator">:=</span> html<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;parsing HTML: %v&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">var</span> result <span class="token operator">*</span>html<span class="token punctuation">.</span>Node
	<span class="token function">forEachNode</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>ElementNode <span class="token punctuation">{</span>
			<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> attr <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>Attr <span class="token punctuation">{</span>
				<span class="token keyword">if</span> attr<span class="token punctuation">.</span>Key <span class="token operator">==</span> <span class="token string">&quot;id&quot;</span> <span class="token operator">&amp;&amp;</span> attr<span class="token punctuation">.</span>Val <span class="token operator">==</span> id <span class="token punctuation">{</span>
					result <span class="token operator">=</span> n
					<span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment">// Stop traversal</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment">// Continue traversal</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> result <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">forEachNode</span><span class="token punctuation">(</span>n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> post <span class="token keyword">func</span><span class="token punctuation">(</span>n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> pre <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">pre</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> c <span class="token operator">:=</span> n<span class="token punctuation">.</span>FirstChild<span class="token punctuation">;</span> c <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> c <span class="token operator">=</span> c<span class="token punctuation">.</span>NextSibling <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">forEachNode</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> pre<span class="token punctuation">,</span> post<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> post <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">post</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">startElement</span><span class="token punctuation">(</span>n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>ElementNode <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%*s&lt;%s&quot;</span><span class="token punctuation">,</span> depth<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> attr <span class="token operator">:=</span> <span class="token keyword">range</span> n<span class="token punctuation">.</span>Attr <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot; %s=&#39;%s&#39;&quot;</span><span class="token punctuation">,</span> attr<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> attr<span class="token punctuation">.</span>Val<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">if</span> n<span class="token punctuation">.</span>FirstChild <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;/&gt;\\n&quot;</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;&gt;\\n&quot;</span><span class="token punctuation">)</span>
			depth<span class="token operator">++</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>CommentNode <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%*s&lt;!-- %s --&gt;\\n&quot;</span><span class="token punctuation">,</span> depth<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>TextNode <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%*s%s\\n&quot;</span><span class="token punctuation">,</span> depth<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">endElement</span><span class="token punctuation">(</span>n <span class="token operator">*</span>html<span class="token punctuation">.</span>Node<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> n<span class="token punctuation">.</span>Type <span class="token operator">==</span> html<span class="token punctuation">.</span>ElementNode <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">.</span>FirstChild <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		depth<span class="token operator">--</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%*s&lt;/%s&gt;\\n&quot;</span><span class="token punctuation">,</span> depth<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token comment">//  go run main.go https://golang.org footer-description</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240528163204834.png" alt="image-20240528163204834"></p><hr><h3 id="ex5-9-expad" tabindex="-1"><a class="header-anchor" href="#ex5-9-expad"><span>EX5.9.expad</span></a></h3><p>编写函数expand，将s中的&quot;foo&quot;替换为f(&quot;foo&quot;)的返回值。</p><div class="language-Go line-numbers-mode" data-ext="Go" data-title="Go"><pre class="language-Go"><code>func expand(s string, f func(string) string) string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;strings&quot;</span>
<span class="token punctuation">)</span>

<span class="token comment">// expand 函数将字符串 s 中的 &quot;foo&quot; 替换为 f(&quot;foo&quot;) 的返回值</span>
<span class="token keyword">func</span> <span class="token function">expand</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> f <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 示例 f 函数，将 &quot;foo&quot; 替换为 &quot;bar&quot;</span>
	f <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token string">&quot;bar&quot;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 测试 expand 函数</span>
	s <span class="token operator">:=</span> <span class="token string">&quot;foo foo foo foo foo foo foo foo foo foo foo foo&quot;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;原始字符串:&quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>
	result <span class="token operator">:=</span> <span class="token function">expand</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> f<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;变更字符串:&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/image-20240528163929539.png" alt="image-20240528163929539"></p><hr><h2 id="ch5-6-匿名函数" tabindex="-1"><a class="header-anchor" href="#ch5-6-匿名函数"><span>CH5.6.匿名函数</span></a></h2>`,70),r={href:"https://golang-china.github.io/gopl-zh/ch5/ch5-06.html",target:"_blank",rel:"noopener noreferrer"},k=s(`<p>匿名函数不声明函数名称</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span><span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> 返回值列表 <span class="token punctuation">{</span>
    <span class="token comment">// 函数体</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用于如下场景</p><ul><li><p>定义无需命名的临时函数</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 定义并立即调用匿名函数</span>
    <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>将函数作为参数传递</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">applyOperation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">,</span> operation <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">operation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">:=</span> <span class="token function">applyOperation</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> x <span class="token operator">*</span> y
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment">// 输出 12</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>创建闭包，捕获并操作外部变量</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token comment">// squares返回一个匿名函数。</span>
<span class="token comment">// 该匿名函数每次被调用时都会返回下一个数的平方。</span>
<span class="token keyword">func</span> <span class="token function">squares</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x <span class="token builtin">int</span>
    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
        x<span class="token operator">++</span>
        <span class="token keyword">return</span> x <span class="token operator">*</span> x
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    f <span class="token operator">:=</span> <span class="token function">squares</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;1&quot;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;4&quot;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;9&quot;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;16&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="ch5-7-可变参数" tabindex="-1"><a class="header-anchor" href="#ch5-7-可变参数"><span>CH5.7.可变参数</span></a></h2>`,6),d={href:"https://golang-china.github.io/gopl-zh/ch5/ch5-07.html",target:"_blank",rel:"noopener noreferrer"},v=s(`<blockquote><p>类似 Python 中的 <code>**kwagrs</code></p></blockquote><p>在 Go 语言中, 可变参数提供了一种灵活的方法来定义可以接受任意数量参数的函数</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">functionName</span><span class="token punctuation">(</span>paramType <span class="token operator">...</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 函数体</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token comment">// sum 函数接受可变数量的 int 参数</span>
<span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    total <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
        total <span class="token operator">+=</span> num
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> total
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">// 输出 6</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出 15</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202406040005014.png" alt="image-20240604000554962"></p><p>关键点包括：</p><ul><li><p>使用 <code>...type</code> 语法定义可变参数</p></li><li><p>可变参数必须是函数的最后一个参数</p></li><li><p>可以将切片解包为可变参数传递</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>nums <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    total <span class="token operator">:=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> nums <span class="token punctuation">{</span>
        total <span class="token operator">+=</span> num
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> total
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    numbers <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span>
    result <span class="token operator">:=</span> <span class="token function">sum</span><span class="token punctuation">(</span>numbers<span class="token operator">...</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// 输出 15</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202406040008615.png" alt="image-20240604000803556"></p></li></ul><p>可变参数在需要处理不同数量的输入时非常有用，常用于如日志记录、聚合计算等场景</p><hr><h2 id="ch5-8-deferred函数" tabindex="-1"><a class="header-anchor" href="#ch5-8-deferred函数"><span>CH5.8.Deferred函数</span></a></h2>`,11),m={href:"https://golang-china.github.io/gopl-zh/ch5/ch5-08.html",target:"_blank",rel:"noopener noreferrer"},b=s('<p>在 Go 语言中，<code>defer</code> 语句用于延迟函数的执行，直到包含该 <code>defer</code> 语句的函数返回时再执行</p><p><code>defer</code> 语句通常用于确保某些清理操作（如关闭文件、解锁资源等）在函数执行完毕后一定会被执行，无论函数是否正常返回或遇到错误</p><blockquote><p>我们最开始见到 Deferred 函数实在关闭 <code>resp.Body</code> 那里</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202406040010502.png" alt="image-20240604001015461"></p></blockquote><hr><h2 id="ch5-9-panic异常-ch5-10-recover捕获异常" tabindex="-1"><a class="header-anchor" href="#ch5-9-panic异常-ch5-10-recover捕获异常"><span>CH5.9.Panic异常.CH5.10.Recover捕获异常</span></a></h2>',5),g={href:"https://golang-china.github.io/gopl-zh/ch5/ch5-09.html",target:"_blank",rel:"noopener noreferrer"},f=s("<p>Go 语言中，<code>panic</code> 是一种用于表示程序遇到不可恢复错误的机制</p><p>当程序调用 <code>panic</code> 函数时，会立即停止当前函数的执行，运行时会开始回溯（unwind）调用堆栈，并执行每一层堆栈中的 <code>defer</code> 语句，直到程序崩溃退出或被 <code>recover</code> 捕获</p><blockquote><p>但是正常写程序还是尽量使用正常的错误处理机制, 避免滥用 panic, 毕竟 Go 不像其他语言的异常处理机制一样, Go 语言提倡显式的错误处理，而不是依赖隐式的异常机制, 异常机制往往会导致隐藏的控制流</p><p>这意味着 Go 语言函数返回值中会包含错误信息, 调用者需要检查并处理这些错误</p></blockquote><p><code>panic</code> 和 <code>recover</code> 的使用场景</p><ul><li><p><code>panic</code></p><ul><li>无法恢复的错误：如数组越界、空指针引用等</li><li>程序进入不可预期的状态</li><li>在库函数中，遇到不能继续执行的严重错误</li></ul></li><li><p><code>recover</code></p><ul><li><p>需要从 <code>panic</code> 中恢复并继续执行的情况</p><p>例如，在服务器中，一个请求的处理过程中遇到 <code>panic</code>，希望记录错误日志并继续处理其他请求</p></li></ul></li></ul><hr>",6);function h(y,E){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[n("a",r,[t("匿名函数 - Go语言圣经 (golang-china.github.io)"),p(a)])])]),k,n("blockquote",null,[n("p",null,[n("a",d,[t("可变参数 - Go语言圣经 (golang-china.github.io)"),p(a)])])]),v,n("blockquote",null,[n("p",null,[n("a",m,[t("Deferred函数 - Go语言圣经 (golang-china.github.io)"),p(a)])])]),b,n("blockquote",null,[n("p",null,[n("a",g,[t("Panic异常 - Go语言圣经 (golang-china.github.io)"),p(a)])])]),f])}const x=e(i,[["render",h],["__file","CH5-函数.html.vue"]]),B=JSON.parse('{"path":"/Language/Go/Go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F/CH5-%E5%87%BD%E6%95%B0.html","title":"CH5-函数","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"CH5.1.函数声明","slug":"ch5-1-函数声明","link":"#ch5-1-函数声明","children":[]},{"level":2,"title":"CH5.2.递归","slug":"ch5-2-递归","link":"#ch5-2-递归","children":[{"level":3,"title":"EX5.1.循环改递归","slug":"ex5-1-循环改递归","link":"#ex5-1-循环改递归","children":[]},{"level":3,"title":"EX5.2.记录同名元素次数","slug":"ex5-2-记录同名元素次数","link":"#ex5-2-记录同名元素次数","children":[]},{"level":3,"title":"EX5.3.选择性输出节点内容","slug":"ex5-3-选择性输出节点内容","link":"#ex5-3-选择性输出节点内容","children":[]},{"level":3,"title":"EX5.4.处理其他类型节点","slug":"ex5-4-处理其他类型节点","link":"#ex5-4-处理其他类型节点","children":[]}]},{"level":2,"title":"CH5.3.多返回值","slug":"ch5-3-多返回值","link":"#ch5-3-多返回值","children":[{"level":3,"title":"EX5.5.统计单词和图片的数量","slug":"ex5-5-统计单词和图片的数量","link":"#ex5-5-统计单词和图片的数量","children":[]},{"level":3,"title":"EX5.6.bare return","slug":"ex5-6-bare-return","link":"#ex5-6-bare-return","children":[]}]},{"level":2,"title":"CH5.4.错误","slug":"ch5-4-错误","link":"#ch5-4-错误","children":[]},{"level":2,"title":"CH5.5.函数值","slug":"ch5-5-函数值","link":"#ch5-5-函数值","children":[{"level":3,"title":"EX5.7.通用HTML输出器","slug":"ex5-7-通用html输出器","link":"#ex5-7-通用html输出器","children":[]},{"level":3,"title":"EX5.8.查找元素","slug":"ex5-8-查找元素","link":"#ex5-8-查找元素","children":[]},{"level":3,"title":"EX5.9.expad","slug":"ex5-9-expad","link":"#ex5-9-expad","children":[]}]},{"level":2,"title":"CH5.6.匿名函数","slug":"ch5-6-匿名函数","link":"#ch5-6-匿名函数","children":[]},{"level":2,"title":"CH5.7.可变参数","slug":"ch5-7-可变参数","link":"#ch5-7-可变参数","children":[]},{"level":2,"title":"CH5.8.Deferred函数","slug":"ch5-8-deferred函数","link":"#ch5-8-deferred函数","children":[]},{"level":2,"title":"CH5.9.Panic异常.CH5.10.Recover捕获异常","slug":"ch5-9-panic异常-ch5-10-recover捕获异常","link":"#ch5-9-panic异常-ch5-10-recover捕获异常","children":[]}],"git":{"createdTime":1716915244000,"updatedTime":1717433912000,"contributors":[{"name":"233","email":"ayusummer233@gmail.com","commits":1},{"name":"233JG","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":11.52,"words":3457},"filePathRelative":"Language/Go/Go语言圣经/CH5-函数.md","localizedDate":"2024年5月28日","excerpt":"\\n<hr>\\n<ul>\\n<li><a href=\\"#ch5-%E5%87%BD%E6%95%B0\\">CH5-函数</a>\\n<ul>\\n<li><a href=\\"#ch51%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\\">CH5.1.函数声明</a></li>\\n<li><a href=\\"#ch52%E9%80%92%E5%BD%92\\">CH5.2.递归</a>\\n<ul>\\n<li><a href=\\"#ex51%E5%BE%AA%E7%8E%AF%E6%94%B9%E9%80%92%E5%BD%92\\">EX5.1.循环改递归</a></li>\\n<li><a href=\\"#ex52%E8%AE%B0%E5%BD%95%E5%90%8C%E5%90%8D%E5%85%83%E7%B4%A0%E6%AC%A1%E6%95%B0\\">EX5.2.记录同名元素次数</a></li>\\n<li><a href=\\"#ex53%E9%80%89%E6%8B%A9%E6%80%A7%E8%BE%93%E5%87%BA%E8%8A%82%E7%82%B9%E5%86%85%E5%AE%B9\\">EX5.3.选择性输出节点内容</a></li>\\n<li><a href=\\"#ex54%E5%A4%84%E7%90%86%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B%E8%8A%82%E7%82%B9\\">EX5.4.处理其他类型节点</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#ch53%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC\\">CH5.3.多返回值</a>\\n<ul>\\n<li><a href=\\"#ex55%E7%BB%9F%E8%AE%A1%E5%8D%95%E8%AF%8D%E5%92%8C%E5%9B%BE%E7%89%87%E7%9A%84%E6%95%B0%E9%87%8F\\">EX5.5.统计单词和图片的数量</a></li>\\n<li><a href=\\"#ex56bare-return\\">EX5.6.bare return</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#ch54%E9%94%99%E8%AF%AF\\">CH5.4.错误</a></li>\\n<li><a href=\\"#ch55%E5%87%BD%E6%95%B0%E5%80%BC\\">CH5.5.函数值</a>\\n<ul>\\n<li><a href=\\"#ex57%E9%80%9A%E7%94%A8html%E8%BE%93%E5%87%BA%E5%99%A8\\">EX5.7.通用HTML输出器</a></li>\\n<li><a href=\\"#ex58%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0\\">EX5.8.查找元素</a></li>\\n<li><a href=\\"#ex59expad\\">EX5.9.expad</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#ch56%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0\\">CH5.6.匿名函数</a></li>\\n<li><a href=\\"#ch57%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0\\">CH5.7.可变参数</a></li>\\n<li><a href=\\"#ch58deferred%E5%87%BD%E6%95%B0\\">CH5.8.Deferred函数</a></li>\\n<li><a href=\\"#ch59panic%E5%BC%82%E5%B8%B8ch510recover%E6%8D%95%E8%8E%B7%E5%BC%82%E5%B8%B8\\">CH5.9.Panic异常.CH5.10.Recover捕获异常</a></li>\\n</ul>\\n</li>\\n</ul>"}');export{x as comp,B as data};
