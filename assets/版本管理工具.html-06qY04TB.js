import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as d,c as u,a as e,d as n,b as a,w as t,e as i}from"./app-BT-bWAve.js";const h={},m=i('<h1 id="版本管理工具" tabindex="-1"><a class="header-anchor" href="#版本管理工具"><span>版本管理工具</span></a></h1><ul><li><a href="#%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7">版本管理工具</a><ul><li><a href="#python%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7">Python版本管理工具</a><ul><li><a href="#pyenv">pyenv</a><ul><li><a href="#%E5%AE%89%E8%A3%85">安装</a></li><li><a href="#%E4%BD%BF%E7%94%A8">使用</a></li></ul></li><li><a href="#conda">conda</a><ul><li><a href="#miniconda">miniconda</a></li><li><a href="#anaconda">Anaconda</a><ul><li><a href="#%E5%AE%89%E8%A3%85-1">安装</a></li><li><a href="#%E9%85%8D%E7%BD%AE">配置</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-python-%E7%8E%AF%E5%A2%83">创建与使用 python 环境</a><ul><li><a href="#%E4%BD%BF%E7%94%A8-anaconda-navigator">使用 Anaconda Navigator</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C">使用命令行</a></li></ul></li><li><a href="#anaconda-%E6%8D%A2%E6%BA%90">Anaconda 换源</a></li><li><a href="#anaconda-navigator-%E5%8D%87%E7%BA%A7">Anaconda Navigator 升级</a></li><li><a href="#%E6%8A%A5%E9%94%99%E6%94%B6%E9%9B%86">报错收集</a><ul><li><a href="#check_hostname-requires-server_hostname">check_hostname requires server_hostname</a></li><li><a href="#%E5%90%84%E7%B1%BB-httperror-%E7%9B%B8%E5%85%B3">各类 <code>HTTPError</code> 相关</a></li><li><a href="#modulenotfounderror-no-module-named-pip_vendor"><code>ModuleNotFoundError: No module named &#39;pip._vendor....&#39;</code></a></li></ul></li></ul></li></ul></li><li><a href="#linux-update-alternatives">Linux-update-alternatives</a></li></ul></li><li><a href="#python%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7">Python依赖版本管理工具</a><ul><li><a href="#virtual-environment">virtual environment</a></li><li><a href="#pipenv">Pipenv</a></li><li><a href="#poetry">Poetry</a><ul><li><a href="#%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82">系统需求</a></li><li><a href="#%E5%AE%89%E8%A3%85-2">安装</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">配置文件</a><ul><li><a href="#pyprojecttoml">pyproject.toml</a></li></ul></li><li><a href="#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95">基本用法</a><ul><li><a href="#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96">安装依赖</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83">使用虚拟环境</a></li><li><a href="#%E7%BB%93%E5%90%88-conda-%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8">结合 conda 环境使用</a><ul><li><a href="#%E5%9C%A8%E5%BD%93%E5%89%8D-conda-%E7%8E%AF%E5%A2%83%E7%9A%84-bin-%E7%9B%AE%E5%BD%95%E4%B8%AD%E6%89%BE%E4%B8%8D%E5%88%B0-activate-%E8%84%9A%E6%9C%AC%E5%AF%BC%E8%87%B4%E7%8E%AF%E5%A2%83%E6%BF%80%E6%B4%BB%E5%A4%B1%E8%B4%A5ubuntu">在当前 conda 环境的 <code>bin</code> 目录中找不到 activate 脚本导致环境激活失败(ubuntu)</a></li></ul></li></ul></li><li><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a><ul><li><a href="#failed-to-create-the-collection-prompt-dismissed">Failed to create the collection: Prompt dismissed..</a></li><li><a href="#%E5%8D%A1-keyring">卡 keyring</a></li><li><a href="#python-%E7%89%88%E6%9C%AC%E4%B8%8D%E5%AF%B9">python 版本不对</a></li></ul></li></ul></li><li><a href="#pdm">PDM</a><ul><li><a href="#%E6%A6%82%E8%BF%B0">概述</a></li><li><a href="#%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7">主要特性</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83">为什么不用虚拟环境</a></li><li><a href="#%E5%AE%89%E8%A3%85-3">安装</a></li><li><a href="#quickstart">QuickStart</a></li><li><a href="#working-with-pep-582">working with PEP 582</a></li><li><a href="#pdm-scripts">PDM Scripts</a></li><li><a href="#pdm-packer">PDM-packer</a></li></ul></li><li><a href="#pipx">pipx</a><ul><li><a href="#%E5%AE%89%E8%A3%85-4">安装</a></li><li><a href="#%E6%A6%82%E8%BF%B0-1">概述</a></li><li><a href="#pipx-%E4%B8%8E-pip-%E7%9A%84%E5%8C%BA%E5%88%AB">pipx 与 pip 的区别</a></li><li><a href="#pipx-%E4%BB%8E%E4%BB%80%E4%B9%88%E5%9C%B0%E6%96%B9%E5%AE%89%E8%A3%85-app">pipx 从什么地方安装 app</a></li></ul></li></ul></li></ul></li></ul><hr><h2 id="python版本管理工具" tabindex="-1"><a class="header-anchor" href="#python版本管理工具"><span>Python版本管理工具</span></a></h2><p>类似于 Nodejs 中的 NVM 用于管理多个 nodejs 版本, Python 也有类似的 Python 版本管理工具</p><hr><h3 id="pyenv" tabindex="-1"><a class="header-anchor" href="#pyenv"><span>pyenv</span></a></h3>',7),v={href:"https://github.com/pyenv/pyenv",target:"_blank",rel:"noopener noreferrer"},b=e("p",null,"pyenv 可让您轻松地在多个 Python 版本之间切换。它简单、不引人注目，并且遵循 UNIX 单一用途工具只做好一件事的传统。",-1),g=e("p",null,[n("pyenv 使用注入到"),e("code",null,"PATH"),n("中的 shim 可执行文件拦截 Python 命令，确定应用程序指定的 Python 版本，并将命令传递到正确的 Python 安装。")],-1),y={href:"https://github.com/pyenv/pyenv",target:"_blank",rel:"noopener noreferrer"},_=e("hr",null,null,-1),k=e("h4",{id:"安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装"},[e("span",null,"安装")])],-1),f=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# 如果需要的话可以设置下 https 代理, 例如:"),n(`
`),e("span",{class:"token builtin class-name"},"export"),n(),e("span",{class:"token assign-left variable"},"http_proxy"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},'"http://127.0.0.1:7890"'),n(`
`),e("span",{class:"token builtin class-name"},"export"),n(),e("span",{class:"token assign-left variable"},"https_proxy"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},'"http://127.0.0.1:7890"'),n(`
`),e("span",{class:"token comment"},"# 安装 pyenv"),n(`
`),e("span",{class:"token function"},"curl"),n(" https://pyenv.run "),e("span",{class:"token operator"},"|"),n(),e("span",{class:"token function"},"bash"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),E=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202407311706846.png",alt:"image-20240731170648771"})],-1),x=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202407311707443.png",alt:"image-20240731170700389"})],-1),A=e("p",null,[n("根据输出提示中所说的那样, 如果你用的是 bash 那就在 "),e("code",null,"~/.bashrc"),n(" 中添加如下命令, 如果用的是 "),e("code",null,"zsh"),n(" 则在 "),e("code",null,"~/.zshrc"),n(" 中添加如下命令, 其他 shell 同理")],-1),w=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"export"),n(),e("span",{class:"token assign-left variable"},"PYENV_ROOT"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},[n('"'),e("span",{class:"token environment constant"},"$HOME"),n('/.pyenv"')]),n(`
`),e("span",{class:"token punctuation"},"["),e("span",{class:"token punctuation"},"["),n(),e("span",{class:"token parameter variable"},"-d"),n(),e("span",{class:"token variable"},"$PYENV_ROOT"),n("/bin "),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},"]"),n(),e("span",{class:"token operator"},"&&"),n(),e("span",{class:"token builtin class-name"},"export"),n(),e("span",{class:"token assign-left variable"},[e("span",{class:"token environment constant"},"PATH")]),e("span",{class:"token operator"},"="),e("span",{class:"token string"},[n('"'),e("span",{class:"token variable"},"$PYENV_ROOT"),n("/bin:"),e("span",{class:"token environment constant"},"$PATH"),n('"')]),n(`
`),e("span",{class:"token builtin class-name"},"eval"),n(),e("span",{class:"token string"},[n('"'),e("span",{class:"token variable"},[e("span",{class:"token variable"},"$("),n("pyenv init -"),e("span",{class:"token variable"},")")]),n('"')]),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),B={href:"https://github.com/pyenv/pyenv-installer",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"pyenv",-1),q=e("hr",null,null,-1),D=e("p",null,[n("Pyenv 并不正式支持 Windows，并且无法在适用于 Linux 的 Windows 子系统之外的 Windows 中工作。此外，即使在 "),e("code",null,"Windows Subsystem for Linux"),n(" 中, 它安装的 Python 也不是 "),e("code",null,"native Windows"),n(" 版本，而是在虚拟机中运行的 Linux 版本 - 因此您将无法获得 Windows 特定的功能。")],-1),C={href:"https://github.com/pyenv-win/pyenv-win",target:"_blank",rel:"noopener noreferrer"},N=e("code",null,"pyenv-win",-1),j=i(`<hr><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h4><p>这里只讨论 Linux 下的 pyenv 的使用</p><p>首先需要把一些基础的 Python 构建工具库安装一下</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">make</span> build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev <span class="token function">wget</span> <span class="token function">curl</span> llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python3-openssl <span class="token function">git</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>安装并切换到指定 Python 版本, 例如:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装 python3.10.4</span>
pyenv <span class="token function">install</span> python3.10.4
<span class="token comment"># 为全局激活 python3.10.4</span>
pyenv global python3.10.4
<span class="token comment"># 每当您位于当前目录（或其子目录）时自动选择</span>
pyenv <span class="token builtin class-name">local</span> python3.10.4
<span class="token comment"># 仅选择当前 shell 会话</span>
pyenv shell python3.10.4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202407311823350.png" alt="image-20240731182322273"></p><hr><h3 id="conda" tabindex="-1"><a class="header-anchor" href="#conda"><span>conda</span></a></h3>`,10),F={href:"https://conda.io/projects/conda/en/latest/user-guide/getting-started.html",target:"_blank",rel:"noopener noreferrer"},T=e("p",null,[e("strong",null,"Conda 是一个开源的包管理和环境管理系统"),n("，它能够运行、安装和更新各种包和依赖，包括 Python 和非 Python 包。Conda 适用于 Windows、macOS 和 Linux 系统。")],-1),L=e("p",null,"我们可以通过安装 conda 发行版来使用 conda, 常见的 conda 发行版主要是 miniconda 和 anaconda",-1),S=e("hr",null,null,-1),M=e("h4",{id:"miniconda",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#miniconda"},[e("span",null,"miniconda")])],-1),W={href:"https://docs.anaconda.com/miniconda/",target:"_blank",rel:"noopener noreferrer"},R=e("p",null,[n("Miniconda 是 conda 的免费最小安装程序。它是 Anaconda 的一个小型引导版本，仅包含 conda、Python、它们所依赖的包以及少量其他有用的包（例如 pip、zlib 等）。如果您需要更多软件包，请使用"),e("code",null,"conda install"),n("命令从 Anaconda 公共存储库或其他渠道（例如 conda-forge 或 bioconda）默认提供的数千个软件包中进行安装。")],-1),I={href:"https://docs.anaconda.com/miniconda/miniconda-system-requirements/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://docs.anaconda.com/miniconda/",target:"_blank",rel:"noopener noreferrer"},H=e("hr",null,null,-1),U=e("h4",{id:"anaconda",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#anaconda"},[e("span",null,"Anaconda")])],-1),z={href:"https://www.anaconda.com/download",target:"_blank",rel:"noopener noreferrer"},V=e("p",null,"Anaconda Distribution 是一个功能齐全的安装程序，附带一套用于数据科学的软件包，以及 Anaconda Navigator（一个用于 conda 环境的 GUI 应用程序）。",-1),$=e("hr",null,null,-1),G=e("h5",{id:"安装-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装-1"},[e("span",null,"安装")])],-1),J=e("hr",null,null,-1),Y={href:"https://github.com/python/cpython/pull/26307",target:"_blank",rel:"noopener noreferrer"},Q=e("p",null,"需要注意的是, 如果使用 Clash 的话需要可以打开此配置",-1),K=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202407311549040.png",alt:"image-20240731154928528"})],-1),X=e("p",null,"否则使用 Anaconda Navigator 或者 conda 环境操作时会报错",-1),Z={href:"https://ayusummer-my.sharepoint.com/:f:/g/personal/233_ayusummer_onmicrosoft_com/EhGEGFxHsINMtuhCpcUlQtUBRflV21xfYIkwpbeF2-d8IQ?e=Inh6dl",target:"_blank",rel:"noopener noreferrer"},ee={href:"https://www.anaconda.com/products/individual",target:"_blank",rel:"noopener noreferrer"},ne=e("br",null,null,-1),ae=e("blockquote",null,[e("p",null,"需要注意的是 Anaconda 装完之后打开命令行总会自动进入 conda 环境, 可以通过更改 conda 配置来取消自动进入"),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[n("conda config "),e("span",{class:"token parameter variable"},"--set"),n(" auto_activate_base "),e("span",{class:"token boolean"},"false"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])]),e("p",null,[n("如果想要设置自动进入的话将 "),e("code",null,"false"),n(" 改为 "),e("code",null,"true"),n(" 运行即可")])],-1),se=e("p",null,[n("安装完成后打开 "),e("code",null,"Anaconda Navigator"),n(":")],-1),te=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202205230936469.png",alt:"image-20220523093633147"})],-1),le=e("hr",null,null,-1),oe={href:"https://cloud.tencent.com/developer/article/1649008",target:"_blank",rel:"noopener noreferrer"},ie=e("br",null,null,-1),re={href:"https://blog.csdn.net/chenxy_bwave/article/details/119996001",target:"_blank",rel:"noopener noreferrer"},pe=e("hr",null,null,-1),ce={href:"https://www.anaconda.com/products/individual",target:"_blank",rel:"noopener noreferrer"},de=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# 安装 Anaconda"),n(`
`),e("span",{class:"token comment"},"#wget https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh"),n(`
`),e("span",{class:"token comment"},"#bash Anaconda3-2021.11-Linux-x86_64.sh"),n(`
`),e("span",{class:"token function"},"wget"),n(` https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh
`),e("span",{class:"token function"},"bash"),n(` Anaconda3-2022.05-Linux-x86_64.sh
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ue=e("blockquote",null,[e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/20211219065157.png",alt:"20211219065157"})]),e("p",null,[n("若出现 "),e("code",null,"段错误 (核心已转储)"),n(" 字样, 可以使用")]),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"wget"),n(` https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])]),e("p",null,"从断点处继续下载")],-1),he=e("p",null,"长按 ENTER 阅读完条款",-1),me=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/20211219065309.png",alt:"20211219065309"})],-1),ve=e("p",null,"yes",-1),be=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/20211219065431.png",alt:"20211219065431"})],-1),ge=e("p",null,[n("选择安装路径, 默认为 "),e("code",null,"/root/anaconda3"),n(", 这个过程会比较长")],-1),ye=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/20211219065943.png",alt:"20211219065943"})],-1),_e=e("p",null,[n("yes, 执行初始化, 这将会将命令行工具 conda 添加到系统的 PATH 环境变量中。"),e("br"),n(" 不过想要激活 Anaconda，还需要关闭并且重新打开你的 shell 或者在当前 shell 会话中输入下面的命令，来重新加载 PATH 环境变量：")],-1),ke=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"source"),n(` ~/.bashrc
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),fe=e("p",null,[n("可以使用 "),e("code",null,"conda --version"),n(" 查看 Anaconda 版本")],-1),Ee=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/20211219070617.png",alt:"20211219070617"})],-1),xe=e("p",null,"设置国内镜像",-1),Ae=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"#设置清华镜像"),n(`
conda config `),e("span",{class:"token parameter variable"},"--add"),n(` channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config `),e("span",{class:"token parameter variable"},"--add"),n(` channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config `),e("span",{class:"token parameter variable"},"--add"),n(` channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
conda config `),e("span",{class:"token parameter variable"},"--add"),n(` channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/
`),e("span",{class:"token comment"},"#设置bioconda"),n(`
conda config `),e("span",{class:"token parameter variable"},"--add"),n(` channels bioconda
conda config `),e("span",{class:"token parameter variable"},"--add"),n(` channels conda-forge
`),e("span",{class:"token comment"},"#设置搜索时显示通道地址"),n(`
conda config `),e("span",{class:"token parameter variable"},"--set"),n(" show_channel_urls "),e("span",{class:"token function"},"yes"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),we=e("p",null,null,-1),Be=i(`<hr><h5 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h5><p><code>Anaconda</code> 安装完成后调起命令行会默认启动 conda 环境, 可以使用如下命令开启或关闭该项配置</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 关闭自动启动conda环境</span>
conda config <span class="token parameter variable">--set</span> auto_activate_base <span class="token boolean">false</span>
<span class="token comment"># 启动自动启动conda环境</span>
conda config <span class="token parameter variable">--set</span> auto_activate_base <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="创建与使用-python-环境" tabindex="-1"><a class="header-anchor" href="#创建与使用-python-环境"><span>创建与使用 python 环境</span></a></h5><h6 id="使用-anaconda-navigator" tabindex="-1"><a class="header-anchor" href="#使用-anaconda-navigator"><span>使用 Anaconda Navigator</span></a></h6><p>打开 <code>Anaconda Navigator -&gt; Environments</code> 在环境列表底部按钮中找到 <code>Create</code> 并点击</p><p><img src="http://cdn.ayusummer233.top/img/202205171533981.png" alt="image-20220517153334579"></p><p>为新环境命一个名(英文命名, 尽量简短些, 之后激活要用)</p><blockquote><p>选择 Python 环境可以保守些, 比如最新版本回退一两个大版本这样的, 主要是因为有一些三方库更新没跟上, 不一定支持最新版本</p></blockquote><p><img src="http://cdn.ayusummer233.top/img/202205171534732.png" alt="image-20220517153442365"></p><p>在命令行中使用 conda 环境可以使用如下指令激活:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda activate 环境名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202205171537691.png" alt="image-20220517153733464"></p><hr><h6 id="使用命令行" tabindex="-1"><a class="header-anchor" href="#使用命令行"><span>使用命令行</span></a></h6><p>创建一个名为 <code>BigData</code>, python 版本为 3.9 的虚拟环境</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda create <span class="token parameter variable">-n</span> BigData <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3.9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>激活 <code>BigData</code> conda 环境</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda activate BigData
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202208031558796.png" alt="20211219072053"></p><p>退出当前虚拟环境</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda deactivate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,24),Pe={href:"https://www.jianshu.com/p/f14ac62bef99",target:"_blank",rel:"noopener noreferrer"},qe=e("br",null,null,-1),De={href:"https://blog.csdn.net/chenxy_bwave/article/details/119996001",target:"_blank",rel:"noopener noreferrer"},Ce=e("br",null,null,-1),Ne={href:"https://www.anaconda.com/products/individual",target:"_blank",rel:"noopener noreferrer"},je=e("br",null,null,-1),Fe=e("hr",null,null,-1),Te=e("h5",{id:"anaconda-换源",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#anaconda-换源"},[e("span",null,"Anaconda 换源")])],-1),Le={href:"https://www.cnblogs.com/yuvejxke/p/13169172.html",target:"_blank",rel:"noopener noreferrer"},Se={href:"https://blog.csdn.net/scl52tg/article/details/120959893",target:"_blank",rel:"noopener noreferrer"},Me=i(`<ul><li><p>打开 <code>anaconda prompt</code><br><img src="http://cdn.ayusummer233.top/img/20220113131937.png" alt="20220113131937"><br><img src="http://cdn.ayusummer233.top/img/20220113132007.png" alt="20220113132007"></p></li><li><p>执行以下命令来配置清华源：</p><blockquote><p>不打开 navigator 也是完全可行的, 打开命令行就可以了, 前提是为 anaconda 配置了环境变量</p><p>只要在命令行中 <code>conda -V</code> 有版本号输出就可以了</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置清华源是为了后续使用 <code>pip</code> 命令安装 python 库时快些, 不配置换源而直接使用默认源的话在墙内容易超时报错</p><blockquote><p>中科大源:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/
conda config <span class="token parameter variable">--add</span> channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/
conda config <span class="token parameter variable">--set</span> show_channel_urls <span class="token function">yes</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>需要注意的是 conda 换源后会使更新 conda 的操作可能会报错</p><p>因此在更新 conda 的时候记得回复默认源</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda config --remove-key channels
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看源:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda config <span class="token parameter variable">--show</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202208040122840.png" alt="image-20220804012242625"></p></blockquote></li></ul><hr><h5 id="anaconda-navigator-升级" tabindex="-1"><a class="header-anchor" href="#anaconda-navigator-升级"><span>Anaconda Navigator 升级</span></a></h5><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda update conda <span class="token parameter variable">-y</span>
conda update anaconda <span class="token parameter variable">-y</span>
conda update anaconda-navigator <span class="token parameter variable">-y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>如果进行了换源操作记得在升级前恢复默认源, 否则可能会在镜像源中找不到更新包</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>conda config --remove-key channels
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote><hr><h5 id="报错收集" tabindex="-1"><a class="header-anchor" href="#报错收集"><span>报错收集</span></a></h5><h6 id="check-hostname-requires-server-hostname" tabindex="-1"><a class="header-anchor" href="#check-hostname-requires-server-hostname"><span>check_hostname requires server_hostname</span></a></h6>`,8),We=e("li",null,[n("本来是在 "),e("code",null,"Pycharm"),n(" 中新建 "),e("code",null,"conda"),n(" 环境报的错误,接着打开 "),e("code",null,"Anaconda Navigator"),n(" 也报了相同的错误")],-1),Re={href:"https://github.com/ContinuumIO/anaconda-issues/issues/12410",target:"_blank",rel:"noopener noreferrer"},Ie=e("strong",null,"关掉VPN",-1),Oe=e("p",null,"对于 Clash 而言可以打开此项配置",-1),He=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202307281210626.png",alt:"image-20230719000029091"})],-1),Ue={href:"https://github.com/python/cpython/pull/26307",target:"_blank",rel:"noopener noreferrer"},ze=i('<p>开了之后就正常了:</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202307281210111.png" alt="image-20230719000057721"></p><hr><h6 id="各类-httperror-相关" tabindex="-1"><a class="header-anchor" href="#各类-httperror-相关"><span>各类 <code>HTTPError</code> 相关</span></a></h6><p>我这边报错都是清华的源报错,换成阿里的源就没问题了(</p><ul><li><p><code>https://mirrors.aliyun.com/anaconda/pkgs/main/</code></p><p><img src="http://cdn.ayusummer233.top/img/20210522090710.png" alt="20210522090710"></p></li></ul><hr><h6 id="modulenotfounderror-no-module-named-pip-vendor" tabindex="-1"><a class="header-anchor" href="#modulenotfounderror-no-module-named-pip-vendor"><span><code>ModuleNotFoundError: No module named &#39;pip._vendor....&#39;</code></span></a></h6><ul><li><code>pip</code> 出问题了</li><li>在 <code>CMD.exe Prompt</code> 中执行 <code>conda update pip</code> 即可</li></ul><hr><h3 id="linux-update-alternatives" tabindex="-1"><a class="header-anchor" href="#linux-update-alternatives"><span>Linux-update-alternatives</span></a></h3>',11),Ve={href:"https://www.jb51.net/article/276121.htm",target:"_blank",rel:"noopener noreferrer"},$e={href:"https://ayusummer233.gitlab.io/dailynotesbackup/Language/Java/Java.html",target:"_blank",rel:"noopener noreferrer"},Ge=e("code",null,"update-alternatives",-1),Je=e("code",null,"update-alternatives",-1),Ye={href:"https://www.jb51.net/article/276121.htm",target:"_blank",rel:"noopener noreferrer"},Qe=i(`<hr><h2 id="python依赖版本管理工具" tabindex="-1"><a class="header-anchor" href="#python依赖版本管理工具"><span>Python依赖版本管理工具</span></a></h2><hr><h3 id="virtual-environment" tabindex="-1"><a class="header-anchor" href="#virtual-environment"><span>virtual environment</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 安装 virtualenv</span>
pip <span class="token function">install</span> virtualenv

<span class="token comment"># 使用 virtualenv 创建虚拟环境</span>
virtualenv <span class="token parameter variable">-p</span> python3 <span class="token function">env</span>

<span class="token comment"># 激活虚拟环境(Windows)</span>
.<span class="token punctuation">\\</span>env<span class="token punctuation">\\</span>Scripts<span class="token punctuation">\\</span>activate

<span class="token comment"># 激活虚拟环境(Linux)</span>
<span class="token builtin class-name">source</span> env/bin/activate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里的 <code>-p python3</code> 中的 <code>python3</code> 具体会创建什么版本的 python 环境, 只需要在当前命令行中 <code>python3 -V</code> 看一下就知道了</p><p>相应的要创建什么版本的 python 环境, 也可以直接将 python3 环境指定环境 python 解释器的路径, 例如</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>virtualenv <span class="token parameter variable">-p</span> /usr/bin/python3.11 <span class="token function">env</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>PS: 使用 conda 环境的 python 创建虚拟环境时最好进入 <code>conda activate [env_name]</code> 然后再使用 <code>virtualenv -p python [env_name]</code> 来创建, 直接使用 conda python 路径创建可能会卡住</p></blockquote><ul><li><p>在 Win 中对应环境变量中路径下匹配到的首个 <code>python.exe</code>, 相应的 <code>python3</code> 就对应的是第一个匹配到的 <code>python3.exe</code>, 可以使用如下命令确认:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>python <span class="token operator">-</span>V
python3 <span class="token operator">-</span>V

python
&gt;&gt;&gt; import sys
&gt;&gt;&gt; print<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>executable<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202311091447843.png" alt="image-20231109144745689"></p></li><li><p>在 Linux 中对应的即为 <code>/usr/bin/python</code> 符号链接指向的 python 程序, linux 中要修改的话修改相应 <code>/usr/bin/pythonxx</code> 符号链接对应的 python 程序路径即可</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202311091451909.png" alt="image-20231109145155632"></p></li></ul></blockquote><hr><h3 id="pipenv" tabindex="-1"><a class="header-anchor" href="#pipenv"><span>Pipenv</span></a></h3><blockquote><p>这里记录的是 ubuntu 下的配置<br> Windows 的话 Pycharm 中有自带的 Pipenv 包</p></blockquote>`,9),Ke={href:"https://www.w3cschool.cn/article/94449206.html",target:"_blank",rel:"noopener noreferrer"},Xe={href:"https://laomeinote.com/4-points-need-to-be-noticed-about-pipenv-usage-in-wsl-ubuntu-18.04",target:"_blank",rel:"noopener noreferrer"},Ze={href:"https://pipenv.pypa.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},en={href:"https://docs.python.org/3/tutorial/venv.html",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://pipenv.pypa.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},an={href:"https://pip.pypa.io/en/stable/",target:"_blank",rel:"noopener noreferrer"},sn={href:"https://docs.python.org/3/library/venv.html",target:"_blank",rel:"noopener noreferrer"},tn=i(`<p>虚拟环境是一个自包含的目录树，其中包含针对特定 Python 版本的 Python 安装，以及许多其他包。</p><p>安装 <code>pipenv</code> 模块:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">apt</span> <span class="token function">install</span> pipenv
pip insatll pipenv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>cd</code> 命令切换到需要安装虚拟环境的目录安装虚拟环境(如果当前目录下没有 <code>Pipfile</code> 则会先生成 <code>Pipfile</code>, 如果有的话便会继续安装虚拟环境):</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pipenv <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>Pipfile</code> 中将 <code>[[source]]</code> 区域下的 <code>url</code> 改为国内的源</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 华为镜像</span>
https://repo.huaweicloud.com/repository/pypi/simple
<span class="token comment"># 阿里镜像</span>
https://mirrors.aliyun.com/pypi/simple
<span class="token comment"># 官方源</span>
https://pypi.python.org/simple
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202111142217965.png" alt="image-20211114221709756"></p><p>如果默认生成的 <code>Pipfile</code> 中的包特别多, 那么这条命令会执行很长时间且没有 log, 这将会是一个很折磨的过程(</p></blockquote><p>启动虚拟环境</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pipenv shell
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以通过 <code>exit</code> 退出虚拟环境</p><hr><h3 id="poetry" tabindex="-1"><a class="header-anchor" href="#poetry"><span>Poetry</span></a></h3>`,11),ln={href:"https://python-poetry.org/",target:"_blank",rel:"noopener noreferrer"},on={href:"https://github.com/python-poetry/poetry",target:"_blank",rel:"noopener noreferrer"},rn=i('<hr><p>Poetry 是 Python 的依赖管理器</p><p>Poetry 可以帮助您声明、管理和安装 Python 项目的依赖项，确保到处都有正确的 stack。</p><hr><h4 id="系统需求" tabindex="-1"><a class="header-anchor" href="#系统需求"><span>系统需求</span></a></h4><p>需要 Python3.8+</p><p>Windows Python 基本都是到官网下的比较新的版本, 一般不会出问题</p><blockquote><p>PS: Windows 尽量不要使用微软商店提供的 Python, 目录管理混乱, 导致很多衍生命令执行时走默认路径检测会报错</p></blockquote><p>主要是 Linux, 尤其是服务器使用老版本 Linux 自带的 python3 版本可能比较老, 需要注意一下, 如果低于 Python3.8 则需要对应安装, 推荐使用上文提到的 <a href="#pyenv">pyenv</a></p><hr><h4 id="安装-2" tabindex="-1"><a class="header-anchor" href="#安装-2"><span>安装</span></a></h4>',11),pn={href:"https://python-poetry.org/docs/#windows-powershell-install-instructions",target:"_blank",rel:"noopener noreferrer"},cn=e("hr",null,null,-1),dn=e("p",null,"Poetry 提供了一个自定义的安装程序, 通过解构 Poetry 的依赖关系, 将 Poetry 与系统的其他部分隔离开",-1),un=e("hr",null,null,-1),hn=e("blockquote",null,[e("p",null,"kali 推荐通过此种方式安装")],-1),mn=e("p",null,[e("code",null,"osx / linux / bashonwindows install instructions"),n(":")],-1),vn=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# 如果需要请设置代理"),n(`
`),e("span",{class:"token builtin class-name"},"export"),n(),e("span",{class:"token assign-left variable"},"http_proxy"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},'"http://127.0.0.1:7890"'),n(`
`),e("span",{class:"token builtin class-name"},"export"),n(),e("span",{class:"token assign-left variable"},"https_proxy"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},'"http://127.0.0.1:7890"'),n(`
`),e("span",{class:"token comment"},"# 安装 poetry"),n(`
`),e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-sSL"),n(" https://install.python-poetry.org "),e("span",{class:"token operator"},"|"),n(` python3 -
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),bn=e("blockquote",null,[e("p",null,"如果报错"),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202208101916266.png",alt:"image-20220810191651104"})]),e("p",null,[n("则可通过 "),e("code",null,"--insecure"),n(" 参数来放弃验证")]),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-sSL"),n(),e("span",{class:"token parameter variable"},"--insecure"),n(" https://install.python-poetry.org "),e("span",{class:"token operator"},"|"),n(` python -
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])]),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202208101919959.png",alt:"image-20220810191920848"})]),e("hr"),e("p",null,[n("如果出现 "),e("code",null,"syntax error"),n(" 那么大概是 Python 版本比较低, 可以安装 python3.8 及以上版本后使用")]),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-sSL"),n(),e("span",{class:"token parameter variable"},"--insecure"),n(" https://install.python-poetry.org "),e("span",{class:"token operator"},"|"),n(` python3 -
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])]),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202209132050127.png",alt:"image-20220913205028516"})])],-1),gn=e("p",null,[n("打开 "),e("code",null,"~/.bashrc"),n(": 将 poetry 所在目录添加到该配置文件中")],-1),yn=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"export"),n(),e("span",{class:"token assign-left variable"},[e("span",{class:"token environment constant"},"PATH")]),e("span",{class:"token operator"},"="),e("span",{class:"token string"},[n('"/root/.local/bin:'),e("span",{class:"token environment constant"},"$PATH"),n('"')]),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),_n=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# 重载配置文件"),n(`
`),e("span",{class:"token builtin class-name"},"source"),n(` ~/.bashrc
`),e("span",{class:"token comment"},"# 查看 poetry 版本"),n(`
poetry `),e("span",{class:"token parameter variable"},"-V"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),kn=e("blockquote",null,[e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202208101927167.png",alt:"image-20220810192714020"})])],-1),fn=e("hr",null,null,-1),En=e("p",null,[e("code",null,"windows powershell install instructions"),n(":")],-1),xn=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[e("span",{class:"token punctuation"},"("),e("span",{class:"token function"},"Invoke-WebRequest"),n(),e("span",{class:"token operator"},"-"),n("Uri https:"),e("span",{class:"token operator"},"/"),e("span",{class:"token operator"},"/"),n("install"),e("span",{class:"token punctuation"},"."),n("python-poetry"),e("span",{class:"token punctuation"},"."),n("org "),e("span",{class:"token operator"},"-"),n("UseBasicParsing"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),n("Content "),e("span",{class:"token punctuation"},"|"),n(" python "),e("span",{class:"token operator"},"-"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),An=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202205270657858.png",alt:"image-20220527065741632"})],-1),wn=e("blockquote",null,[e("p",null,[n("上图中使用的是旧版的 "),e("code",null,"1.x"),n(" 版本的安装链接: "),e("code",null,"https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py"),n(", 新版本推荐使用 "),e("code",null,"https://install.python-poetry.org"),n(" 来安装")]),e("p",null,[e("strong",null,"建议在安装Python之前系统优先的Python不要是conda环境, 也就是说最好系统优先的 Python 环境是自己手动安装的标准 Python 环境")]),e("p",null,"PS: 因为我没装标准Python环境直接用 conda 出问题了, poetry 安装位置会乱飞还会找不到dll"),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202208041015646.png",alt:"image-20220804101533439"})]),e("p",null,[n("使用 "),e("code",null,"poetry --version"),n(" 报错的话需要手动加下环境变量, 如上图所示的目录加到系统变量的 "),e("code",null,"path"),n(" 变量中即可")]),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202208041018136.png",alt:"image-20220804101836027"})]),e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202208041017345.png",alt:"image-20220804101729257"})]),e("hr"),e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[n("urllib"),e("span",{class:"token punctuation"},"."),n("error"),e("span",{class:"token punctuation"},"."),n("URLError: <urlopen error unknown url "),e("span",{class:"token function"},"type"),n(`: https>
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])]),e("p",null,"如果出现以上错误, 那可能是因为默认 Python 版本比较低, 建议使用 3.8 以上的版本")],-1),Bn=e("p",null,[n("poetry 会自动添加环境变量, 安装完后重启 "),e("code",null,"powershell"),n(", 检查下 poetry 版本:")],-1),Pn=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[n("poetry "),e("span",{class:"token operator"},"--"),n(`version
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),qn=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202205270701015.png",alt:"image-20220527070102934"})],-1),Dn=e("hr",null,null,-1),Cn=e("blockquote",null,[e("p",null,"Windows 推荐使用 pipx 的方式安装"),e("p",null,"kali 不建议使用此种方式安装")],-1),Nn=e("p",null,"安装 pipx(需要 pip 19.0 及以上版本)",-1),jn=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[n("pip install "),e("span",{class:"token operator"},"--"),n(`user pipx
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Fn=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202403191137749.png",alt:"image-20240319113705723"})],-1),Tn=e("p",null,"可以看到最后有 warning 提示当前没有添加 Path, 可以 cd 到对应目录然后运行",-1),Ln=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[e("span",{class:"token punctuation"},"."),n("\\pipx"),e("span",{class:"token punctuation"},"."),n(`exe ensurepath
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Sn=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202403191139344.png",alt:"image-20240319113958368"})],-1),Mn=e("hr",null,null,-1),Wn=e("p",null,"安装完 pipx 后可以通过 pipx 安装 poetry(记得重启 powershell 以更新环境变量)",-1),Rn=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,`pipx install poetry
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),In=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202403191144311.png",alt:"image-20240319114404568"})],-1),On=e("hr",null,null,-1),Hn=e("hr",null,null,-1),Un=e("h4",{id:"配置文件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#配置文件"},[e("span",null,"配置文件")])],-1),zn={href:"https://python-poetry.org/docs/configuration/",target:"_blank",rel:"noopener noreferrer"},Vn=i(`<hr><ul><li>macOS: <code>~/Library/Application Support/pypoetry</code></li><li>Windows: <code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\pypoetry</code></li></ul><p>可以通过:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>poetry config virtualenvs<span class="token punctuation">.</span>in-project true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来让 poetry 默认在项目根目录下创建 <code>venv</code> 作为虚拟环境目录, 或者直接写配置文件:</p><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">virtualenvs</span><span class="token punctuation">]</span>
<span class="token key property">in-project</span> <span class="token punctuation">=</span> <span class="token boolean">true</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>此项配置默认为 <code>false</code></p><p>若在配置此项之前创建了虚拟环境, windows 下应该在 <code>C:\\Users\\用户名\\AppData\\Local\\pypoetry\\Cache\\virtualenvs</code> 目录下, 将其删除后重新在项目根目录下 <code>poetry install</code> 即可在项目根目录下创建 <code>.venv</code> 作为虚拟环境目录</p></blockquote><hr><h5 id="pyproject-toml" tabindex="-1"><a class="header-anchor" href="#pyproject-toml"><span>pyproject.toml</span></a></h5><p><code>换源</code></p>`,10),$n={href:"https://python-poetry.org/docs/pyproject/",target:"_blank",rel:"noopener noreferrer"},Gn=i(`<p>Poetry 默认配置从 PyPI 查询依赖包, 如果想要使用私仓(或是镜像)的话需要如如下配置</p><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">tool.poetry.source</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;private&quot;</span>
<span class="token key property">url</span> <span class="token punctuation">=</span> <span class="token string">&quot;http://example.com/simple&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>例如:</p><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">tool.poetry.source</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;aliyun&quot;</span>
<span class="token key property">url</span> <span class="token punctuation">=</span> <span class="token string">&quot;http://mirrors.aliyun.com/pypi/simple&quot;</span>
<span class="token key property">priority</span> <span class="token punctuation">=</span> <span class="token string">&quot;primary&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-toml line-numbers-mode" data-ext="toml" data-title="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">tool.poetry.source</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;tsinghua&quot;</span>
<span class="token key property">url</span> <span class="token punctuation">=</span> <span class="token string">&quot;https://pypi.tuna.tsinghua.edu.cn/simple/&quot;</span>
<span class="token key property">priority</span> <span class="token punctuation">=</span> <span class="token string">&quot;primary&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><hr><h4 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h4><hr><h5 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖"><span>安装依赖</span></a></h5>`,7),Jn={href:"http://yun.win80.net/portal/article/index/id/6627/cid/2.html",target:"_blank",rel:"noopener noreferrer"},Yn={href:"https://bbs.huaweicloud.com/blogs/317789",target:"_blank",rel:"noopener noreferrer"},Qn={href:"https://juejin.cn/post/7013280966852476941",target:"_blank",rel:"noopener noreferrer"},Kn=i(`<p>对于一个用 poetry 设置 python 环境的项目, 其根目录下有 poetry 的<code>pyproject.toml</code> 即可通过 <code>poetry install</code> 来安装该项目所需的依赖, 如果发现卡主或是其他问题, 可以使用 <code>poetry -vvv install</code> 以在安装依赖时查看更详细的调试信息</p><hr><p>可以在 <code>pyproject.toml</code> 的 <code>tool.poetry.dependencies</code> 区域指明依赖版本</p><p><img src="http://cdn.ayusummer233.top/img/202205270737225.png" alt="image-20220527073752137"></p><p>也可以通过 <code>poetry add</code> 来安装依赖</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>poetry add numpy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h5 id="使用虚拟环境" tabindex="-1"><a class="header-anchor" href="#使用虚拟环境"><span>使用虚拟环境</span></a></h5><p>默认情况下, poetry 会在 <code>{cache-dir}/virtualenvs</code> (<code>{cache-dir}\\virtualenvs</code> on Windows)目录下创建一个虚拟环境:</p><p><img src="http://cdn.ayusummer233.top/img/202205270746721.png" alt="image-20220527074613612"></p><p>如果先前设置了 <code>poetry config virtualenvs.in-project true</code> 的话执行 <code>poetry install</code> 安装依赖则会装在项目根目录的 <code>.venv</code> 里</p><p>激活虚拟环境: <code>cd</code> 进入 <code>.venv</code> 然后使用 <code>poetry shell</code> 激活虚拟环境</p><hr><h6 id="结合-conda-环境使用" tabindex="-1"><a class="header-anchor" href="#结合-conda-环境使用"><span>结合 conda 环境使用</span></a></h6><p>poetry 可以直接使用 conda 环境而不单独创建虚拟环境</p><p>只需要先 activate 对应 conda 环境, 然后把 <code>pyproject.toml</code> 中的 python 版本对其当前 conda 环境版本即可</p><p>此时使用 <code>poetry shell</code> 会输出 <code>Virtual environment already activated: xxxxxx</code></p><p>不过当然也可以使用 conda 环境来创建虚拟环境, 只需要使用 <code>poetry env use 对应conda环境的python.exe路径</code> 即可利用该 conda 环境创建虚拟环境</p><h6 id="在当前-conda-环境的-bin-目录中找不到-activate-脚本导致环境激活失败-ubuntu" tabindex="-1"><a class="header-anchor" href="#在当前-conda-环境的-bin-目录中找不到-activate-脚本导致环境激活失败-ubuntu"><span>在当前 conda 环境的 <code>bin</code> 目录中找不到 activate 脚本导致环境激活失败(ubuntu)</span></a></h6><p>在该 conda 环境的 bin 目录下新建一个 activate 文件, 写入如下代码然后重新 poetry shell 即可</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>
<span class="token assign-left variable">_CONDA_ROOT</span><span class="token operator">=</span><span class="token string">&quot;/root/anaconda3/envs/xxx&quot;</span>	<span class="token comment"># 该 conda 环境根目录</span>
<span class="token comment"># Copyright (C) 2012 Anaconda, Inc</span>
<span class="token comment"># SPDX-License-Identifier: BSD-3-Clause</span>
<span class="token punctuation">\\</span>. <span class="token string">&quot;<span class="token variable">$_CONDA_ROOT</span>/etc/profile.d/conda.sh&quot;</span> <span class="token operator">||</span> <span class="token builtin class-name">return</span> <span class="token variable">$?</span>
conda activate <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>奇怪的是虽然没有 activate 脚本, 但是直接 conda activate 是有用的</p></blockquote><hr><h5 id="删除虚拟环境" tabindex="-1"><a class="header-anchor" href="#删除虚拟环境"><span>删除虚拟环境</span></a></h5><p>查找虚拟环境的位置:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>poetry <span class="token function">env</span> info <span class="token parameter variable">--path</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列出所有的虚拟环境:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>poetry <span class="token function">env</span> list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从上述命令输出中找到需要删除的虚拟环境的名称然后运行如下命令:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>poetry <span class="token function">env</span> remove <span class="token punctuation">[</span>虚拟环境名称<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h4 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span>常见问题</span></a></h4><h5 id="failed-to-create-the-collection-prompt-dismissed" tabindex="-1"><a class="header-anchor" href="#failed-to-create-the-collection-prompt-dismissed"><span>Failed to create the collection: Prompt dismissed..</span></a></h5>`,33),Xn={href:"https://github.com/python-poetry/poetry/issues/2692",target:"_blank",rel:"noopener noreferrer"},Zn={href:"https://blog.frank-mich.com/python-poetry-1-0-0-private-repo-issue-fix/",target:"_blank",rel:"noopener noreferrer"},ea=i(`<div class="language-python line-numbers-mode" data-ext="py" data-title="py"><pre class="language-python"><code><span class="token comment"># test.py</span>
<span class="token keyword">import</span> keyring
<span class="token keyword">print</span><span class="token punctuation">(</span>keyring<span class="token punctuation">.</span>util<span class="token punctuation">.</span>platform_<span class="token punctuation">.</span>config_root<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>poetry run python test.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>打开输出的文件目录(不存在则创建), 新建一个 <code>keyringrc.cfg</code>, 填入</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>[backend]                                    
default-keyring=keyring.backends.fail.Keyring
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h5 id="卡-keyring" tabindex="-1"><a class="header-anchor" href="#卡-keyring"><span>卡 keyring</span></a></h5>`,6),na={href:"https://github.com/python-poetry/poetry/issues/6050",target:"_blank",rel:"noopener noreferrer"},aa=i(`<p>有时候 <code>poetry install</code> 会一只卡 pending, 此时需要查看一些调试信息, 可以使用 <code>poetry -vvv install </code> 来查看更多运行时信息, 如果发现是卡在 keyring 上, 可以运行如下命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHON_KEYRING_BACKEND</span><span class="token operator">=</span>keyring.backends.null.Keyring
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后重新 <code>poetry -vvv install</code> 即可</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202404151517164.png" alt="企业微信截图_17131654242132"></p><hr><h5 id="python-版本不对" tabindex="-1"><a class="header-anchor" href="#python-版本不对"><span>python 版本不对</span></a></h5><blockquote><p>PS: 如下方案是纯手动的, 推荐优先使用上文中提到的 <a href="#pyenv">pyenv</a></p></blockquote><p>比如这个仓库需要 <code>python 3.10</code> 以上的 python 版本, 这里虽然我全局 python 目前是 3.10, 但是 poetry 当时是 python 3.8 版本安装的, 使用了当时全局的 python 3.8 环境</p><p><img src="http://cdn.ayusummer233.top/DailyNotes/202405072246932.png" alt="image-20240507224630840"></p><p>因此这里需要将 poetry 的默认 python 版本指向 python3.10</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看 poetry 当前使用的 python 版本(在带 pyproject.toml 的目录下执行)</span>
poetry <span class="token function">env</span> info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202405072301117.png" alt="image-20240507230153035"></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 为 poetry 指定需要使用的 python 环境</span>
poetry <span class="token function">env</span> use <span class="token punctuation">[</span>python可执行程序路径<span class="token punctuation">]</span>
<span class="token comment"># PS: 如果需要使用的就是当前全局的 python 的话也可以直接</span>
poetry <span class="token function">env</span> use python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/DailyNotes/202405072303970.png" alt="image-20240507230346854"></p><hr><h3 id="pdm" tabindex="-1"><a class="header-anchor" href="#pdm"><span>PDM</span></a></h3>`,16),sa={href:"https://github.com/pdm-project/pdm",target:"_blank",rel:"noopener noreferrer"},ta={href:"https://frostming.com/2020/02-28/pdm-introduction/",target:"_blank",rel:"noopener noreferrer"},la={href:"https://github.com/pdm-project/pdm/blob/main/README_zh.md",target:"_blank",rel:"noopener noreferrer"},oa=e("p",null,"官方文档已经讲得很详细了, 这里摘录下来方便个人阅读",-1),ia={href:"https://networm.me/2022/02/13/python-in-continuous-integration/#pdm",target:"_blank",rel:"noopener noreferrer"},ra=e("blockquote",null,[e("p",null,"PDM 是由 Poetry 开发组的成员开发的( •̀ ω •́ )✧")],-1),pa=e("hr",null,null,-1),ca=e("h4",{id:"概述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概述"},[e("span",null,"概述")])],-1),da=e("p",null,[n("PDM 旨在成为下一代 Python 软件包管理工具。它最初是为个人兴趣而诞生的。如果你觉得 "),e("code",null,"pipenv"),n(" 或者 "),e("code",null,"poetry"),n(" 用着非常好，并不想引入一个新的包管理器，那么继续使用它们吧；但如果你发现有些东西这些 工具不支持，那么你很可能可以在 "),e("code",null,"pdm"),n(" 中找到。")],-1),ua={href:"https://www.python.org/dev/peps/pep-0582",target:"_blank",rel:"noopener noreferrer"},ha=i(`<div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>foo
    __pypackages__
        3.8
            lib
                bottle
    myscript.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ma=e("code",null,"__pypackages__",-1),va=e("code",null,"npm",-1),ba=e("code",null,"node_modules",-1),ga={href:"https://www.python.org/dev/peps/pep-0582/#specification",target:"_blank",rel:"noopener noreferrer"},ya=e("hr",null,null,-1),_a=e("h4",{id:"主要特性",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#主要特性"},[e("span",null,"主要特性")])],-1),ka={href:"https://www.python.org/dev/peps/pep-0582",target:"_blank",rel:"noopener noreferrer"},fa=e("li",null,"一个简单且相对快速的依赖解析器，特别是对于大的二进制包发布。",-1),Ea={href:"https://www.python.org/dev/peps/pep-0517",target:"_blank",rel:"noopener noreferrer"},xa=e("li",null,"灵活且强大的插件系统",-1),Aa={href:"https://www.python.org/dev/peps/pep-0621",target:"_blank",rel:"noopener noreferrer"},wa={href:"https://pnpm.io/motivation#saving-disk-space-and-boosting-installation-speed",target:"_blank",rel:"noopener noreferrer"},Ba=e("hr",null,null,-1),Pa=e("h4",{id:"为什么不用虚拟环境",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#为什么不用虚拟环境"},[e("span",null,"为什么不用虚拟环境")])],-1),qa=e("p",null,"现在大部分的 Python 包管理器也同时管理虚拟环境，这主要是为了隔离项目开发环境。但如果涉及到虚拟 环境嵌套虚拟环境的时候，问题就来了：你可能用一个虚拟环境的 Python 安装了某个虚拟环境管理工具， 然后又用这个工具去创建更多虚拟环境。当某一天你升级了新版本的 Python 你必须一个一个去检查这些 虚拟环境，没准哪个就用不了了。",-1),Da={href:"https://www.python.org/dev/peps/pep-0582",target:"_blank",rel:"noopener noreferrer"},Ca={href:"https://github.com/David-OConnor/pyflow",target:"_blank",rel:"noopener noreferrer"},Na={href:"https://www.python.org/dev/peps/pep-0517",target:"_blank",rel:"noopener noreferrer"},ja=e("hr",null,null,-1),Fa=e("h4",{id:"安装-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装-3"},[e("span",null,"安装")])],-1),Ta={href:"https://github.com/pdm-project/pdm/blob/main/README_zh.md#%E5%AE%89%E8%A3%85",target:"_blank",rel:"noopener noreferrer"},La=e("hr",null,null,-1),Sa=e("p",null,"安装 PDM 需要 Python 3.7 或更高版本",-1),Ma=e("blockquote",null,[e("p",null,"但是运行 PDM 没有 Python 版本要求")],-1),Wa=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"curl"),n(),e("span",{class:"token parameter variable"},"-sSL"),n("  https://ghproxy.com/https://raw.githubusercontent.com/pdm-project/pdm/main/install-pdm.py "),e("span",{class:"token operator"},"|"),n(` python3 -
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Ra=e("p",null,[e("code",null,"使用 powershell"),n(":")],-1),Ia=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[e("span",{class:"token punctuation"},"("),e("span",{class:"token function"},"Invoke-WebRequest"),n(),e("span",{class:"token operator"},"-"),n("Uri https:"),e("span",{class:"token operator"},"/"),e("span",{class:"token operator"},"/"),n("raw"),e("span",{class:"token punctuation"},"."),n("githubusercontent"),e("span",{class:"token punctuation"},"."),n("com/pdm-project/pdm/main/"),e("span",{class:"token function"},"install-pdm"),e("span",{class:"token punctuation"},"."),n("py "),e("span",{class:"token operator"},"-"),n("UseBasicParsing"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),n("Content "),e("span",{class:"token punctuation"},"|"),n(" python "),e("span",{class:"token operator"},"-"),n(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Oa=e("blockquote",null,[e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/DailyNotes/202301101130757.png",alt:""})]),e("p",null,"自动添加的 PATH 在用户变量中, 重启 VSCode 后可能依然无法正确识别 p"),e("p",null,"dm 命令, 此时可以手动修改环境变量, 在系统变量的 PATH 中加上上图中的相应值")],-1),Ha=e("hr",null,null,-1),Ua=e("p",null,[e("code",null,"使用 pipx"),n(":")],-1),za=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell","data-title":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,`pipx install pdm
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Va=e("p",null,[e("img",{src:"http://cdn.ayusummer233.top/img/202205262110720.png",alt:"image-20220526211028582"})],-1),$a=i(`<hr><h4 id="quickstart" tabindex="-1"><a class="header-anchor" href="#quickstart"><span>QuickStart</span></a></h4><p>初始化一个新的 PDM 项目:</p><p>新建一个项目文件夹, 在当前文件夹目录下打开 powershell:</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>pdm init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>按照指引回答提示的问题，一个 PDM 项目和对应的<code>pyproject.toml</code>文件就创建好了。</p><p><img src="http://cdn.ayusummer233.top/img/202205262120012.png" alt="image-20220526212055852"></p><p><strong>把依赖安装到 <code>__pypackages__</code> 文件夹中</strong></p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>pdm add tk

<span class="token comment"># 删除则可用:</span>
pdm remove tk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="working-with-pep-582" tabindex="-1"><a class="header-anchor" href="#working-with-pep-582"><span>working with PEP 582</span></a></h4><p>推荐在 <code>.gitignore</code> 中忽略</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>__pypackages__/
.pdm.toml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>对于 VSCode, 可以先用命令行安装 pdm-vscode:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pdm plugin <span class="token function">add</span> pdm-vscode
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>安装完后, 在输入 <code>pdm init</code> 或者 <code>pdm use</code> 命令后会自动创建 <code>.vscode/settings.json</code></p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;python.autoComplete.extraPaths&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;__pypackages__/&lt;major.minor&gt;/lib&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;python.analysis.extraPaths&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;__pypackages__/&lt;major.minor&gt;/lib&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>需要结合 pylance 使用的话需要在项目根目录创建一个 <code>pyrightconfig.json</code>:</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;__pypackages__&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="pdm-scripts" tabindex="-1"><a class="header-anchor" href="#pdm-scripts"><span>PDM Scripts</span></a></h4><p>例如运行 <code>main.py</code> 可以使用</p>`,24),Ga=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`pdm run python main.py
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Ja=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,`pdm run python main.py
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),Ya=e("p",null,"或者",-1),Qa=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token builtin class-name"},"eval"),n(),e("span",{class:"token string"},[n('"'),e("span",{class:"token variable"},[e("span",{class:"token variable"},"$("),n("pdm "),e("span",{class:"token parameter variable"},"--pep582"),e("span",{class:"token variable"},")")]),n('"')]),n(`
python main.py
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ka=e("p",null,[n("或者将 "),e("code",null,"pdm --pep582"),n(" 写到 "),e("code",null,"/root/.bash_profile"),n(" 然后再在 bash 中使用 "),e("code",null,"python main.py")],-1),Xa=e("hr",null,null,-1),Za=e("h4",{id:"pdm-packer",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pdm-packer"},[e("span",null,"PDM-packer")])],-1),es={href:"https://github.com/frostming/pdm-packer",target:"_blank",rel:"noopener noreferrer"},ns=i(`<hr><p>A PDM plugin that packs your packages into a zipapp</p><hr><p>pdm-packer requires Python &gt;=3.7</p><hr><p>安装:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pdm plugin <span class="token function">add</span> pdm-packer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202205262140421.png" alt="image-20220526214016279"></p><hr><p>使用:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ pdm pack <span class="token punctuation">[</span>common-options<span class="token punctuation">]</span> <span class="token punctuation">[</span>pack-options<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>Common Options:</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-h, --help
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>show this help message and exit</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-v, --verbose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>-v for detailed output and -vv for more detailed</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-g, --global
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Use the global project, supply the project root with <code>-p</code> option</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-p PROJECT_PATH, --project PROJECT_PATH
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Specify another path as the project root, which changes the base of pyproject.toml and <code>__pypackages__</code></p></blockquote><p><strong>Pack Options:</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-m MAIN, --main MAIN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Specify the console script entry point for the zipapp</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-o OUTPUT, --output OUTPUT
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Specify the output filename. By default the file name will be inferred from the project name.</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-c, --compress
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Compress files with the deflate method, no compress by default</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>--pyc, --compile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Compile source into pyc files</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>--no-py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Remove the .py files in favor of .pyc files</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>-i INTERPRETER, --interpreter INTERPRETER
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>The Python interpreter path, default: the project interpreter</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>--exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>Create an executable file. If the output file isn&#39;t given, the file name will end with .exe(Windows) or no suffix(Posix)</p></blockquote><p>See also: https://docs.python.org/3.9/library/zipapp.html</p><hr><p>示例:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># Create with default name(&lt;project_name&gt;.pyz) and console_script as the __main__.py</span>
pdm pack
<span class="token comment"># Create an executable file</span>
pdm pack <span class="token parameter variable">--exe</span>
<span class="token comment"># Create with custom __main__.py and filename</span>
pdm pack <span class="token parameter variable">-o</span> app.pyz <span class="token parameter variable">-m</span> app:main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="pipx" tabindex="-1"><a class="header-anchor" href="#pipx"><span>pipx</span></a></h3>`,41),as={href:"https://pypa.github.io/pipx/",target:"_blank",rel:"noopener noreferrer"},ss={href:"https://github.com/pypa/pipx",target:"_blank",rel:"noopener noreferrer"},ts=i(`<hr><h4 id="安装-4" tabindex="-1"><a class="header-anchor" href="#安装-4"><span>安装</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> pipx <span class="token parameter variable">--user</span> pipx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://cdn.ayusummer233.top/img/202205262032936.png" alt="image-20220526203216819"></p><p>提示需要将路径添加到 PATH, 这个可以让 pipx 来完成</p><p>首先 <code>cd</code> 到安装 pipx 的目录, 然后执行 <code>./pipx ensurepath</code>:</p><p><img src="http://cdn.ayusummer233.top/img/202205262032569.png" alt="image-20220526203255502"></p><hr><p>然后重启终端输入 pipx 看看有没有反馈信息</p><p>如果有回显信息:</p><p><img src="http://cdn.ayusummer233.top/img/202205262057504.png" alt="image-20220526205728337"></p><p>那么说明成功了</p><p>如果没有的话则需要手动将 <code>C:\\Users\\233\\AppData\\Roaming\\Python\\Python38\\Scripts</code>(以我上面安装pipx的路径为例) 添加到环境变量的 <code>PATH</code> 变量中</p><hr><h4 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1"><span>概述</span></a></h4><p>Pipx 是一个帮助您安装和运行用 Python 编写的最终用户应用程序的工具。它大致类似于 macOS 的 brew，JavaScript 的 npx，和 Linux 的 apt。</p><p>它与 pip 密切相关。实际上，它使用 pip，但是它专注于安装和管理可以从命令行直接作为应用程序运行的 Python 包。</p><hr><h4 id="pipx-与-pip-的区别" tabindex="-1"><a class="header-anchor" href="#pipx-与-pip-的区别"><span>pipx 与 pip 的区别</span></a></h4><p>Pip 是一个通用的包安装程序，用于没有环境隔离的库和应用程序。</p><p>Pipx 是专门为应用程序安装而设计的，因为它增加了隔离性，但仍然使应用程序可以在外壳中使用: pipx 为每个应用程序及其相关包创建一个隔离的环境。</p><hr><h4 id="pipx-从什么地方安装-app" tabindex="-1"><a class="header-anchor" href="#pipx-从什么地方安装-app"><span>pipx 从什么地方安装 app</span></a></h4><p>默认情况下，pipx 使用与 pip 相同的包索引 PyPI。Pipx 还可以从所有其他来源安装 pip can，比如本地目录、 wheel、 git url 等。</p><p>Python 和 PyPI 允许开发人员使用“控制台脚本入口点”分发代码。这些入口点允许用户从命令行调用 Python 代码，有效地起到独立应用程序的作用。</p><p>Pipx 是一个工具，用于以安全、方便和可靠的方式安装和运行这些数千个包含应用程序的软件包。在某种程度上，它把 pythonpackageindex (PyPI)变成了 Python 应用程序的大型应用程序商店。并不是所有的 Python 包都有入口点，但是很多都有。</p>`,26);function ls(os,is){const s=p("ExternalLinkIcon"),r=p("Tabs");return d(),u("div",null,[m,e("blockquote",null,[e("p",null,[e("a",v,[n("GitHub - pyenv/pyenv: Simple Python version management"),a(s)])])]),b,g,e("p",null,[n("更详细的信息请参阅 "),e("a",y,[n("GitHub - pyenv/pyenv: Simple Python version management"),a(s)])]),_,k,a(r,{id:"319",data:[{id:"UNIX/MacOS"},{id:"Windows"}],active:0},{title0:t(({value:l,isActive:o})=>[n("UNIX/MacOS")]),title1:t(({value:l,isActive:o})=>[n("Windows")]),tab0:t(({value:l,isActive:o})=>[f,E,x,A,w,e("p",null,[n("有关更多详细信息，可以参阅此项目组的其他项目： "),e("a",B,[n("GitHub - pyenv/pyenv-installer: This tool is used to install "),P,n(" and friends."),a(s)])]),q]),tab1:t(({value:l,isActive:o})=>[D,e("p",null,[n("如果使用的是 Windows，建议使用 @kirankotari 的"),e("a",C,[N,a(s)]),n("分支——它会安装本机 Windows Python 版本。")])]),_:1}),j,e("blockquote",null,[e("p",null,[e("a",F,[n("Getting started with conda — conda 24.7.2.dev10 documentation"),a(s)])])]),T,L,S,M,e("blockquote",null,[e("p",null,[e("a",W,[n("Miniconda — Anaconda documentation"),a(s)])])]),R,e("p",null,[n("先看下 "),e("a",I,[n("系统要求 — Anaconda 文档 --- System requirements — Anaconda documentation"),a(s)]),n(" 确认当前机器是否支持安装 miniconda")]),e("p",null,[n("如果支持的话则根据 "),e("a",O,[n("Miniconda — Anaconda documentation"),a(s)]),n(" 进行安装即可")]),H,U,e("blockquote",null,[e("p",null,[e("a",z,[n("anaconda.com/download"),a(s)])])]),V,$,G,J,a(r,{id:"414",data:[{id:"Windows"},{id:"Linux"}],active:0},{title0:t(({value:l,isActive:o})=>[n("Windows")]),title1:t(({value:l,isActive:o})=>[n("Linux")]),tab0:t(({value:l,isActive:o})=>[e("blockquote",null,[e("blockquote",null,[e("p",null,[e("a",Y,[n("bpo-42627: Fix wrong parsing of Windows registry proxy settings by CrazyBoyFeng · Pull Request #26307 · python/cpython · GitHub"),a(s)])])]),Q,K,X]),e("p",null,[e("a",Z,[n("安装包"),a(s)])]),e("blockquote",null,[e("p",null,[e("a",ee,[n("Anaconda 官网"),a(s)]),ne,n(" 可在此处获取其他版本的安装包")])]),ae,se,te,le]),tab1:t(({value:l,isActive:o})=>[e("blockquote",null,[e("p",null,[e("a",oe,[n("如何在 Ubuntu 20.04 上安装 Anaconda - 云+社区 - 腾讯云 (tencent.com)"),a(s)]),ie,e("a",re,[n("Anaconda conda常用命令：从入门到精通_chenxy_bwave的专栏-CSDN博客_conda常用命令"),a(s)])]),pe,e("p",null,[n("可在 "),e("a",ce,[n("Anaconda 官网"),a(s)]),n(" 获取其他版本的安装包")])]),de,ue,he,me,ve,be,ge,ye,_e,ke,fe,Ee,xe,Ae,we]),_:1}),Be,e("blockquote",null,[e("p",null,[e("a",Pe,[n("Conda clean 净化Anaconda - 简书 (jianshu.com)"),a(s)]),qe,e("a",De,[n("Anaconda conda常用命令：从入门到精通_chenxy_bwave的专栏-CSDN博客_conda常用命令"),a(s)]),Ce,e("a",Ne,[n("Anaconda 官网"),a(s)]),je,n(" 可在此处获取其他版本的安装包")])]),Fe,Te,e("blockquote",null,[e("p",null,[e("a",Le,[n("anaconda修改国内源 - 余者皆可 - 博客园 (cnblogs.com)"),a(s)])]),e("p",null,[e("a",Se,[n("Anaconda 换国内源_scl52tg的博客-CSDN博客_conda 换源"),a(s)])])]),Me,e("ul",null,[We,e("li",null,[n("最终在"),e("a",Re,[n("anaconda-issues #12410"),a(s)]),n("找到的相同报错及解决方案为 "),Ie])]),Oe,He,e("blockquote",null,[e("p",null,[e("a",Ue,[n("bpo-42627: Fix wrong parsing of Windows registry proxy settings by CrazyBoyFeng · Pull Request #26307 · python/cpython · GitHubopen in new window"),a(s)])])]),ze,e("blockquote",null,[e("p",null,[e("a",Ve,[n("如何在ubuntu中切换使用不同版本的python_python_脚本之家 (jb51.net)"),a(s)])])]),e("p",null,[n("在 Linux 上, 类似于"),e("a",$e,[n("Java | DailyNotes (ayusummer233.gitlab.io)"),a(s)]),n(" 中提到的可以用 "),Ge,n(" 管理当前 jdk 版本")]),e("p",null,[n("python 也可以使用 "),Je,n(" 管理全局的 python 版本, 详见 "),e("a",Ye,[n("如何在ubuntu中切换使用不同版本的python_python_脚本之家 (jb51.net)"),a(s)])]),Qe,e("blockquote",null,[e("p",null,[e("a",Ke,[n("如何开始使用 Pipenv？ | w3c笔记 (w3cschool.cn)"),a(s)])]),e("p",null,[e("a",Xe,[n("WSL Ubuntu 18.04上使用pipenv的4个关键点 | 老梅笔记 (laomeinote.com)"),a(s)])]),e("p",null,[e("a",Ze,[n("Pipenv: Python Dev Workflow for Humans — pipenv 2021.11.9 documentation (pypa.io)"),a(s)])]),e("p",null,[e("a",en,[n("12. Virtual Environments and Packages — Python 3.10.0 documentation"),a(s)])])]),e("p",null,[e("a",nn,[n("Pipenv"),a(s)]),n(" 是 Python 的 Python 打包工具，是对使用 "),e("a",an,[n("Pip"),a(s)]),n("、"),e("a",sn,[n("Venv"),a(s)]),n(" 和 requirements.txt的升级。Pipenv 是将包管理与虚拟环境相结合的好方法。")]),tn,e("blockquote",null,[e("p",null,[e("a",ln,[n("Poetry - Python dependency management and packaging made easy (python-poetry.org)"),a(s)])]),e("p",null,[e("a",on,[n("python-poetry/poetry: Python dependency management and packaging made easy. (github.com)"),a(s)])])]),rn,e("blockquote",null,[e("p",null,[e("a",pn,[n("Introduction | Documentation | Poetry - Python dependency management and packaging made easy (python-poetry.org)"),a(s)])])]),cn,dn,un,a(r,{id:"882",data:[{id:"Linux"},{id:"Windows"},{id:"pipx"}],active:2},{title0:t(({value:l,isActive:o})=>[n("Linux")]),title1:t(({value:l,isActive:o})=>[n("Windows")]),title2:t(({value:l,isActive:o})=>[n("pipx")]),tab0:t(({value:l,isActive:o})=>[hn,mn,vn,bn,gn,yn,_n,kn,fn]),tab1:t(({value:l,isActive:o})=>[En,xn,An,wn,Bn,Pn,qn,Dn]),tab2:t(({value:l,isActive:o})=>[Cn,Nn,jn,Fn,Tn,Ln,Sn,Mn,Wn,Rn,In,On]),_:1}),Hn,Un,e("blockquote",null,[e("p",null,[e("a",zn,[n("Configuration | Documentation | Poetry - Python dependency management and packaging made easy (python-poetry.org)"),a(s)])])]),Vn,e("blockquote",null,[e("p",null,[e("a",$n,[n("The pyproject.toml file | Documentation | Poetry - Python dependency management and packaging made easy (python-poetry.org)"),a(s)])])]),Gn,e("blockquote",null,[e("p",null,[e("a",Jn,[n("Python - poetry(5) 依赖规范 (win80.net)"),a(s)])]),e("p",null,[e("a",Yn,[n("使用 Python Poetry 进行依赖管理-云社区-华为云 (huaweicloud.com)"),a(s)])]),e("p",null,[e("a",Qn,[n("Python依赖管理及打包工具Poetry使用规范 - 掘金 (juejin.cn)"),a(s)])])]),Kn,e("blockquote",null,[e("p",null,[e("a",Xn,[n("Error: Unable to store the password for poetry-repository-pypi in the key ring: Failed to unlock the collection! · Issue #2692 · python-poetry/poetry (github.com)"),a(s)])]),e("p",null,[e("a",Zn,[n("python poetry 1.0.0 private repo issue fix – Frank-Mich's Blog"),a(s)])])]),ea,e("blockquote",null,[e("p",null,[e("a",na,[n('Poetry blocks on "Pending..." during installation · Issue #6050 · python-poetry/poetry (github.com)'),a(s)])])]),aa,e("blockquote",null,[e("p",null,[e("a",sa,[n("pdm-project/pdm: A modern Python package manager with PEP 582 support. (github.com)"),a(s)])]),e("p",null,[e("a",ta,[n("PDM - 一款新的 Python 包管理器 | Frost's Blog (frostming.com)"),a(s)])]),e("p",null,[e("a",la,[n("pdm/README_zh.md at main · pdm-project/pdm (github.com)"),a(s)])]),oa,e("p",null,[e("a",ia,[n("持续集成中的 Python - 狂飙 (networm.me)"),a(s)])])]),ra,pa,ca,da,e("p",null,[e("a",ua,[n("PEP 582"),a(s)]),n(" 提出下面这种项目的目录结构：")]),ha,e("p",null,[n("项目目录中包含一个"),ma,n("目录，用来放置所有依赖的库文件，就像"),va,n("的"),ba,n("一样。 你可以在"),e("a",ga,[n("这里"),a(s)]),n("阅读更多提案的细节。")]),ya,_a,e("ul",null,[e("li",null,[e("a",ka,[n("PEP 582"),a(s)]),n(" 本地项目库目录，支持安装与运行命令，完全不需要虚拟环境。")]),fa,e("li",null,[n("兼容 "),e("a",Ea,[n("PEP 517"),a(s)]),n(" 的构建后端，用于构建发布包(源码格式与 wheel 格式)")]),xa,e("li",null,[e("a",Aa,[n("PEP 621"),a(s)]),n(" 元数据格式")]),e("li",null,[n("像 "),e("a",wa,[n("pnpm"),a(s)]),n(" 一样的中心化安装缓存，节省磁盘空间")])]),Ba,Pa,qa,e("p",null,[n("然而 "),e("a",Da,[n("PEP 582"),a(s)]),n(" 提供了一个能把 Python 解释器和项目开发环境解耦的方法。这是一个相对比较新的提案， 没有很多相关的工具实现它，这其中就有 "),e("a",Ca,[n("pyflow"),a(s)]),n("。但 pyflow 又是用 Rust 写的，不是所有 Python 的社区 都会用 Rust，这样就没法贡献代码，而且，基于同样的原因，pyflow 并不支持 "),e("a",Na,[n("PEP 517"),a(s)]),n(" 构建。")]),ja,Fa,e("blockquote",null,[e("p",null,[e("a",Ta,[n("pdm/README_zh.md at main · pdm-project/pdm (github.com)"),a(s)])])]),La,Sa,Ma,a(r,{id:"1331",data:[{id:"Linux/Mac"},{id:"Windows"}],active:0},{title0:t(({value:l,isActive:o})=>[n("Linux/Mac")]),title1:t(({value:l,isActive:o})=>[n("Windows")]),tab0:t(({value:l,isActive:o})=>[Wa]),tab1:t(({value:l,isActive:o})=>[Ra,Ia,Oa,Ha,Ua,za,Va]),_:1}),$a,a(r,{id:"1411",data:[{id:"Windows"},{id:"Linux"}],active:0},{title0:t(({value:l,isActive:o})=>[n("Windows")]),title1:t(({value:l,isActive:o})=>[n("Linux")]),tab0:t(({value:l,isActive:o})=>[Ga]),tab1:t(({value:l,isActive:o})=>[Ja,Ya,Qa,Ka]),_:1}),Xa,Za,e("blockquote",null,[e("p",null,[e("a",es,[n("frostming/pdm-packer: A PDM plugin that packs your packages into a zipapp (github.com)"),a(s)])])]),ns,e("blockquote",null,[e("p",null,[e("a",as,[n("pipx (pypa.github.io)"),a(s)])]),e("p",null,[e("a",ss,[n("pypa/pipx: Install and Run Python Applications in Isolated Environments (github.com)"),a(s)])])]),ts])}const cs=c(h,[["render",ls],["__file","版本管理工具.html.vue"]]),ds=JSON.parse(`{"path":"/Language/Python/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7.html","title":"版本管理工具","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Python版本管理工具","slug":"python版本管理工具","link":"#python版本管理工具","children":[{"level":3,"title":"pyenv","slug":"pyenv","link":"#pyenv","children":[]},{"level":3,"title":"conda","slug":"conda","link":"#conda","children":[]},{"level":3,"title":"Linux-update-alternatives","slug":"linux-update-alternatives","link":"#linux-update-alternatives","children":[]}]},{"level":2,"title":"Python依赖版本管理工具","slug":"python依赖版本管理工具","link":"#python依赖版本管理工具","children":[{"level":3,"title":"virtual environment","slug":"virtual-environment","link":"#virtual-environment","children":[]},{"level":3,"title":"Pipenv","slug":"pipenv","link":"#pipenv","children":[]},{"level":3,"title":"Poetry","slug":"poetry","link":"#poetry","children":[]},{"level":3,"title":"PDM","slug":"pdm","link":"#pdm","children":[]},{"level":3,"title":"pipx","slug":"pipx","link":"#pipx","children":[]}]}],"git":{"createdTime":1722423810000,"updatedTime":1725260400000,"contributors":[{"name":"ayusummer233","email":"ayusummer233@gmail.com","commits":3},{"name":"233PC","email":"ayusummer233@gmail.com","commits":1}]},"readingTime":{"minutes":23.7,"words":7110},"filePathRelative":"Language/Python/版本管理工具.md","localizedDate":"2024年7月31日","excerpt":"\\n<ul>\\n<li><a href=\\"#%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7\\">版本管理工具</a>\\n<ul>\\n<li><a href=\\"#python%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7\\">Python版本管理工具</a>\\n<ul>\\n<li><a href=\\"#pyenv\\">pyenv</a>\\n<ul>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85\\">安装</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8\\">使用</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#conda\\">conda</a>\\n<ul>\\n<li><a href=\\"#miniconda\\">miniconda</a></li>\\n<li><a href=\\"#anaconda\\">Anaconda</a>\\n<ul>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85-1\\">安装</a></li>\\n<li><a href=\\"#%E9%85%8D%E7%BD%AE\\">配置</a></li>\\n<li><a href=\\"#%E5%88%9B%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8-python-%E7%8E%AF%E5%A2%83\\">创建与使用 python 环境</a>\\n<ul>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8-anaconda-navigator\\">使用 Anaconda Navigator</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C\\">使用命令行</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#anaconda-%E6%8D%A2%E6%BA%90\\">Anaconda 换源</a></li>\\n<li><a href=\\"#anaconda-navigator-%E5%8D%87%E7%BA%A7\\">Anaconda Navigator 升级</a></li>\\n<li><a href=\\"#%E6%8A%A5%E9%94%99%E6%94%B6%E9%9B%86\\">报错收集</a>\\n<ul>\\n<li><a href=\\"#check_hostname-requires-server_hostname\\">check_hostname requires server_hostname</a></li>\\n<li><a href=\\"#%E5%90%84%E7%B1%BB-httperror-%E7%9B%B8%E5%85%B3\\">各类 <code>HTTPError</code> 相关</a></li>\\n<li><a href=\\"#modulenotfounderror-no-module-named-pip_vendor\\"><code>ModuleNotFoundError: No module named 'pip._vendor....'</code></a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#linux-update-alternatives\\">Linux-update-alternatives</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#python%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7\\">Python依赖版本管理工具</a>\\n<ul>\\n<li><a href=\\"#virtual-environment\\">virtual environment</a></li>\\n<li><a href=\\"#pipenv\\">Pipenv</a></li>\\n<li><a href=\\"#poetry\\">Poetry</a>\\n<ul>\\n<li><a href=\\"#%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82\\">系统需求</a></li>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85-2\\">安装</a></li>\\n<li><a href=\\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\\">配置文件</a>\\n<ul>\\n<li><a href=\\"#pyprojecttoml\\">pyproject.toml</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\\">基本用法</a>\\n<ul>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96\\">安装依赖</a></li>\\n<li><a href=\\"#%E4%BD%BF%E7%94%A8%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83\\">使用虚拟环境</a></li>\\n<li><a href=\\"#%E7%BB%93%E5%90%88-conda-%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8\\">结合 conda 环境使用</a>\\n<ul>\\n<li><a href=\\"#%E5%9C%A8%E5%BD%93%E5%89%8D-conda-%E7%8E%AF%E5%A2%83%E7%9A%84-bin-%E7%9B%AE%E5%BD%95%E4%B8%AD%E6%89%BE%E4%B8%8D%E5%88%B0-activate-%E8%84%9A%E6%9C%AC%E5%AF%BC%E8%87%B4%E7%8E%AF%E5%A2%83%E6%BF%80%E6%B4%BB%E5%A4%B1%E8%B4%A5ubuntu\\">在当前 conda 环境的 <code>bin</code> 目录中找不到 activate 脚本导致环境激活失败(ubuntu)</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\\">常见问题</a>\\n<ul>\\n<li><a href=\\"#failed-to-create-the-collection-prompt-dismissed\\">Failed to create the collection: Prompt dismissed..</a></li>\\n<li><a href=\\"#%E5%8D%A1-keyring\\">卡 keyring</a></li>\\n<li><a href=\\"#python-%E7%89%88%E6%9C%AC%E4%B8%8D%E5%AF%B9\\">python 版本不对</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li><a href=\\"#pdm\\">PDM</a>\\n<ul>\\n<li><a href=\\"#%E6%A6%82%E8%BF%B0\\">概述</a></li>\\n<li><a href=\\"#%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7\\">主要特性</a></li>\\n<li><a href=\\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83\\">为什么不用虚拟环境</a></li>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85-3\\">安装</a></li>\\n<li><a href=\\"#quickstart\\">QuickStart</a></li>\\n<li><a href=\\"#working-with-pep-582\\">working with PEP 582</a></li>\\n<li><a href=\\"#pdm-scripts\\">PDM Scripts</a></li>\\n<li><a href=\\"#pdm-packer\\">PDM-packer</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"#pipx\\">pipx</a>\\n<ul>\\n<li><a href=\\"#%E5%AE%89%E8%A3%85-4\\">安装</a></li>\\n<li><a href=\\"#%E6%A6%82%E8%BF%B0-1\\">概述</a></li>\\n<li><a href=\\"#pipx-%E4%B8%8E-pip-%E7%9A%84%E5%8C%BA%E5%88%AB\\">pipx 与 pip 的区别</a></li>\\n<li><a href=\\"#pipx-%E4%BB%8E%E4%BB%80%E4%B9%88%E5%9C%B0%E6%96%B9%E5%AE%89%E8%A3%85-app\\">pipx 从什么地方安装 app</a></li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n</ul>"}`);export{cs as comp,ds as data};
